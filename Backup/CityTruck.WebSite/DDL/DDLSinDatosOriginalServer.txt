DROP PROCEDURE CITYTRUCK.P_AUX_CONSTRUCTOR_SP_GRABAR;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_AUX_CONSTRUCTOR_SP_GRABAR(p_tabla varchar2, p_parte number) 
 /*
 Finalidad: Construccion de un SP base, para a partir de ella se termine la definicion de un SP de ALTA  o MODIFICACION (GRABAR)
 Recibe:  p_tabla  -> Tabla para la que se construira el SP de
 Fecha Creacion: 26/07/2013
 Autor: Henry Terceros 
 */
IS
 v_cnt NUMBER:=0;
 v_i NUMBER:=0;
 v_CampoID VARCHAR2(30); -- Nombre del campo ID de una tabla
 v_cad VARCHAR2(255);
 v_cNul VARCHAR2(3000):='';
 v_cIns VARCHAR2(3000):='';
 v_cVal VARCHAR2(3000):='';
 v_sep VARCHAR2(2):='';
 v_fin VARCHAR2(2):='';
BEGIN
IF p_parte = 0 OR p_parte = 1 THEN
    --select count(1) into v_cnt from user_tables;
  v_cad := 'CREATE OR REPLACE PROCEDURE P_' || SUBSTR(p_tabla,1,2) || '_GRABAR_' || SUBSTR(p_tabla,4,LENGTH(p_tabla)) || '(' ;
  dbms_output.put_line(v_cad);
  -- Parametros de entrada
  FOR x IN (SELECT * FROM  user_tab_columns WHERE table_name = p_tabla ORDER BY column_id)
  LOOP
    v_cad := ' p_' || lower(x.column_name) || '  IN ' || p_tabla || '.' || x.column_name || '%TYPE,';
    dbms_output.put_line(v_cad);
    -- Construimos la validacion de nulos
    IF x.nullable = 'N' THEN
        v_cNul := v_cNul || 'p_' || lower(x.column_name) || ' IS NULL OR ';
    END IF;
    -- Construimos la cadena INSERT ... El VALUE sera generado mas abajo
    v_cIns := v_cIns || lower(x.column_name) || ', ';
  END LOOP;
  dbms_output.put_line(' p_login_usr   VARCHAR2,  -- Login del usuario que realiza la operacion');
  dbms_output.put_line(' p_res OUT  VARCHAR2');
  dbms_output.put_line(')');
  v_cNul := substr(v_cNul,1,length(v_cNul)-3);
  v_cIns := substr(v_cIns,1,length(v_cIns)-2);
  v_cVal := substr(v_cVal,1,length(v_cVal)-2);
   -- Segmento de Descripcion general del SP
   dbms_output.put_line('/*');
  dbms_output.put_line(' Finalidad: Procedimiento para grabar el alta o modificacion de ' || SUBSTR(p_tabla,4,LENGTH(p_tabla)));
  dbms_output.put_line(' Recibe:  __ , __ , etc -> Parametros ');
  FOR x IN (SELECT * FROM  user_tab_columns WHERE table_name = p_tabla ORDER BY column_id)
  LOOP
    v_cad := '         p_' || lower(x.column_name) || '  -> ';
    dbms_output.put_line(v_cad);
  END LOOP;
  dbms_output.put_line(' Retorna: p_res ->Mensaje de OK ("1") o Descripcion del error');
  dbms_output.put_line(' Fecha Creacion: ' || trunc(sysdate) );
  dbms_output.put_line(' Autor: [nombre] [apellido]'); 
  dbms_output.put_line(' Rev:');
  dbms_output.put_line(' */');
  dbms_output.put_line('IS');
  -- Variables locales
  dbms_output.put_line(' v_cnt NUMBER:=0;');
  dbms_output.put_line(' v_res VARCHAR2(100):=''0''; ');
  dbms_output.put_line(' v_sql VARCHAR2(2000);'); 
  dbms_output.put_line(' v_sql1 VARCHAR2(200);'); 
  dbms_output.put_line(' v_tipo_oper VARCHAR2(10);');
  dbms_output.put_line(' v_rg    ' || p_tabla || '%ROWTYPE;');
  dbms_output.put_line(' v_errC   MN_AUX_LOG_ERRORES.cod_error%type;');
  dbms_output.put_line(' v_errD   MN_AUX_LOG_ERRORES.desc_error%type;');
  dbms_output.put_line(' v_id_log MN_AUX_LOG_ERRORES.id_log%type;');
  dbms_output.put_line(' v_id       NUMBER := 0;');
  dbms_output.put_line('BEGIN');
  -- Segmento de validacion de nulos
  dbms_output.put_line('  -- Validamos nulos');
  dbms_output.put_line('  IF ' || v_cNul || ' THEN');
  dbms_output.put_line('    v_res := ''Faltan parametros.'';');
  dbms_output.put_line('  END IF;');
  -- Segmento validacion de existencia de registro (ojo: para este control, el campo ID de la tabla debe ser el primero)
  SELECT lower(column_name) INTO v_CampoID FROM  user_tab_columns WHERE table_name = p_tabla AND column_id = 1;
  dbms_output.put_line('  -- Para el caso de ALTA, validamos que el registro NO exista');
  dbms_output.put_line('  IF v_res = ''0'' AND (p_' || v_CampoID || ' = 0 OR p_' || v_CampoID || ' IS NULL ) THEN');
  --dbms_output.put_line('      SELECT COUNT (1) INTO v_cnt FROM ' || p_tabla || ' WHERE XxxxX = p_XxxxX; -- !!!! Cambiar el campo XxxxX por el que corresponda validar duplicados !!!!');
  dbms_output.put_line('      IF F_MN_EXISTE_REG(''' || p_tabla || ''',''XxxxX='' || p_XxxxX)=TRUE THEN -- !!!! Cambiar el campo XxxxX por el que corresponda validar duplicados !!!!');
  --dbms_output.put_line('      IF v_cnt > 0 THEN');
  dbms_output.put_line('         v_res := ''El elemento '' || p_XxxxX || '' ya existe.'';');
  dbms_output.put_line('      END IF;');
  dbms_output.put_line('  END IF;');
  dbms_output.put_line('  -- Para el caso de MODIFICACION, validamos que el registro exista');
  dbms_output.put_line('  IF v_res = ''0'' AND p_' || v_CampoID || ' > 0 THEN');
  --dbms_output.put_line('      SELECT COUNT (1) INTO v_cnt FROM ' || p_tabla || ' WHERE ' || v_CampoID || ' = p_' || v_CampoID || ';');
  dbms_output.put_line('      IF F_MN_EXISTE_REG(''' || p_tabla || ''',''' || v_CampoID || '='' || p_' || v_CampoID || ')=FALSE THEN');
  dbms_output.put_line('         v_res := ''NO existe el elemento que pretende modificar.'';');
  dbms_output.put_line('      ELSE');
  dbms_output.put_line('         SELECT * INTO v_rg FROM ' || p_tabla || ' WHERE ' || v_CampoID || ' = p_' || v_CampoID || ';');
  dbms_output.put_line('      END IF;');
  dbms_output.put_line('  END IF;');
  
  dbms_output.put_line('  IF v_res=''0'' THEN');
  dbms_output.put_line('    -- Si se trata de una INSERCION ...');
  dbms_output.put_line('    IF p_' || v_CampoID || ' = 0 OR p_' || v_CampoID || ' IS NULL THEN');
  -- Segmento de INSERT
  dbms_output.put_line('        -- Obtenemos el correlativo');
  dbms_output.put_line('        SELECT q_' || p_tabla || '.nextval INTO v_id FROM dual;');
  dbms_output.put_line('        -- Creamos el registro');
  dbms_output.put_line('        v_sql:=''INSERT INTO ' || p_tabla || '(' || v_cIns || ') '' ||');
  dbms_output.put_line('               ''VALUES('' || v_id || '', '';');
  SELECT COUNT(1) INTO v_cnt FROM  user_tab_columns WHERE table_name = p_tabla;  -- Cantidad de columnas que tiene la tabla (Para definir el caracter final de la instruccion INSERT-coma o parentesis)
  v_i := 0;
  FOR x IN (SELECT * FROM  user_tab_columns WHERE table_name = p_tabla ORDER BY column_id)
  LOOP
    v_i := v_i + 1;
    IF v_i = v_cnt THEN
        v_fin := ')';
    ELSE
        v_fin := ', ';
    END IF;
    IF x.data_precision IS NULL THEN
        v_sep := '''''';
    ELSE
        v_sep := '';
    END IF;
    IF substr(x.column_name,1,2)='ID' AND x.column_id = 1 THEN
        v_cad:= ''; -- Indica que es el campo clave ... ya esta definido su valor lineas arriba
    ELSE
      IF x.column_name = 'FECHA_REG' THEN
        dbms_output.put_line('        v_sql:=v_sql || ''SYSDATE' || v_fin || ''';');
      ELSE
        IF x.nullable = 'N' THEN
          dbms_output.put_line('        v_sql:=v_sql || ''' || v_sep || ''' || ' || 'p_' || lower(x.column_name) || '|| ''' || v_sep || '' || v_fin || '''; ');
        ELSE
          IF x.data_precision IS NULL THEN
            dbms_output.put_line('        IF p_' || lower(x.column_name) || ' IS NULL THEN');
          ELSE
            dbms_output.put_line('        IF p_' || lower(x.column_name) || ' IS NULL OR p_' || lower(x.column_name) || '=0 THEN');
          END IF;
          dbms_output.put_line('          v_sql:=v_sql || ''NULL' || v_fin || ''';');
          dbms_output.put_line('        ELSE');
          dbms_output.put_line('          v_sql:=v_sql || ''' || v_sep || ''' || ' || 'p_' || lower(x.column_name) || '|| ''' || v_sep || '' || v_fin || '''; ');
          dbms_output.put_line('        END IF; ');
        END IF;
      END IF;
    END IF;
  END LOOP;
  dbms_output.put_line('        EXECUTE IMMEDIATE v_sql;');
  dbms_output.put_line('        -- Historico de estado');
  dbms_output.put_line('        v_sql:=''INSERT INTO MN_HIST_TRAN_ESTADOS(id_hist, id_tabla, tabla, operacion, est_orig, est_dest, observ, nom_autoriza, fecha_reg, login_usr) '' ||');
  dbms_output.put_line('               ''VALUES(q_mn_hist_tran_estados.nextval,'' || v_id || '',''''' || p_tabla || ''''',''''xxxOPERACIONxxx'''',''''xxxEST_ORIGxxx'''','''''' || p_estado|| '''''',''''xxxOBSERVACIONxxx'''',''''-'''', SYSDATE,'''''' || p_login_usr || '''''')''; -- !!!! Cambiar valores xxxAAAxxx por los que correspondan !!!!');
  dbms_output.put_line('        EXECUTE IMMEDIATE v_sql;');
  dbms_output.put_line('        v_tipo_oper := ''ALTA'';');
  dbms_output.put_line('    ELSE');

END IF;
IF p_parte = 0 OR p_parte = 2 THEN  

  -- Construimos el segmento para el UPDATE
  dbms_output.put_line('        v_id := p_' || v_CampoID || ';');
  dbms_output.put_line('        -- Construimos la consulta de actualizacion');
  dbms_output.put_line('        v_sql := '''';');
  FOR x IN (SELECT * FROM user_tab_columns WHERE table_name = p_tabla ORDER BY column_id)
  LOOP
    IF x.data_precision IS NULL THEN
        v_sep := '''''';
    ELSE
        v_sep := '';
    END IF;
    IF x.nullable = 'N' THEN
      v_cad := '        IF p_' || lower(x.column_name) || ' IS NOT NULL AND (p_' || lower(x.column_name) || ' <> v_rg.' || lower(x.column_name) || ' OR v_rg.' || lower(x.column_name) || ' IS NULL) THEN';
      dbms_output.put_line(v_cad);
        dbms_output.put_line('            v_sql := v_sql || '' ' || lower(x.column_name) || '=' || v_sep || ''' || p_' || lower(x.column_name) || ' || ''' || v_sep || ','';'); 
        dbms_output.put_line('        END IF;');
    ELSE
      IF x.data_precision IS NULL THEN
        dbms_output.put_line('        IF p_' || lower(x.column_name) || ' <> v_rg.' || lower(x.column_name) || ' OR (p_' || lower(x.column_name) || ' IS NULL AND v_rg.' || lower(x.column_name) || ' IS NOT NULL) OR (p_' || lower(x.column_name) || ' IS NOT NULL AND v_rg.' || lower(x.column_name) || ' IS NULL) THEN');
        dbms_output.put_line('            v_sql := v_sql || '' ' || lower(x.column_name) || '=' || v_sep || ''' || p_' || lower(x.column_name) || ' || ''' || v_sep || ','';'); 
        dbms_output.put_line('        END IF;');
      ELSE
        dbms_output.put_line('        IF p_' || lower(x.column_name) || ' <> v_rg.' || lower(x.column_name) || ' OR ((p_' || lower(x.column_name) || ' IS NULL OR p_' || lower(x.column_name) || ' = 0) AND v_rg.' || lower(x.column_name) || ' IS NOT NULL) OR (p_' || lower(x.column_name) || ' IS NOT NULL AND v_rg.' || lower(x.column_name) || ' IS NULL) THEN ');
        dbms_output.put_line('            IF p_' || lower(x.column_name) || ' IS NULL OR p_' || lower(x.column_name) || ' = 0 THEN');
        dbms_output.put_line('              v_sql := v_sql || '' ' || lower(x.column_name) || '=NULL,'';'); 
        dbms_output.put_line('            ELSE');
        dbms_output.put_line('              v_sql := v_sql || '' ' || lower(x.column_name) || '=' || v_sep || ''' || p_' || lower(x.column_name) || ' || ''' || v_sep || ','';'); 
        dbms_output.put_line('            END IF;');
        dbms_output.put_line('        END IF;');
      END IF;
    END IF;
--    dbms_output.put_line(v_cad);
--    dbms_output.put_line('            v_sql := v_sql || '' ' || lower(x.column_name) || '=' || v_sep || ''' || p_' || lower(x.column_name) || ' || ''' || v_sep || ','';'); 
            --v_sql := v_sql || ' cod_af=''' || p_cod_af || ' '' ,';
--    dbms_output.put_line('        END IF;');
  END LOOP;
  dbms_output.put_line('        -- Comprobamos si existe algun dato a modificar. ');
  dbms_output.put_line('        IF v_sql = '''' OR v_sql IS NULL THEN         -- Oracle trata actualemente a las cadenas vacias como NULL');
  dbms_output.put_line('            v_res := ''No existe ningun dato diferente a ser modificado.'';');
  dbms_output.put_line('        END IF;');
  dbms_output.put_line('        IF v_res = ''0'' THEN');
  dbms_output.put_line('            v_sql := ''UPDATE ' || p_tabla || ' SET '' || SUBSTR (v_sql, 1, LENGTH (v_sql) - 1) || '' WHERE ' || v_CampoID || ' = '' || p_' || v_CampoID || ';');
      --v_sql := 'UPDATE ttt SET ' || SUBSTR (v_sql, 1, LENGTH (v_sql) - 1) || ' WHERE id_rele = ' || p_id_rele;
  dbms_output.put_line('            EXECUTE IMMEDIATE (v_sql);');
  dbms_output.put_line('            v_tipo_oper := ''EDICION'';');
  dbms_output.put_line('        END IF;');
  dbms_output.put_line('    END IF;');

  --Segmento para grabar el historico de Alta o ??? Modificacion ???
  dbms_output.put_line('    IF v_res = ''0'' THEN');
  dbms_output.put_line('        -- Grabamos historicos (un registro por cada campo no nulo)');
  FOR x IN (SELECT * FROM user_tab_columns WHERE table_name = p_tabla ORDER BY column_id)
  LOOP
     IF (substr(x.column_name,1,2)='ID' AND x.column_id = 1) OR  x.column_name = 'FECHA_REG' OR  x.column_name = 'ID_USR'  THEN
        v_cad:= ''; -- No se crean historicos para estos campos
    ELSE
       dbms_output.put_line('        P_MN_GRABAR_HIST_EDICION_DATOS(v_id, ''' || p_tabla || ''', ''' || lower(x.column_name) || ''', v_rg.' || lower(x.column_name) || ', p_' || lower(x.column_name) || ', v_tipo_oper, p_login_usr, v_res);');
    END IF;
  END LOOP;
  dbms_output.put_line('        COMMIT;');
  dbms_output.put_line('        v_res := ''1'';');
  dbms_output.put_line('    END IF;');
  dbms_output.put_line('  END IF;');
  
  dbms_output.put_line('  p_res := v_res;');
  -- Bloque Excepcion
  dbms_output.put_line('EXCEPTION');
  dbms_output.put_line('  WHEN OTHERS THEN');
  dbms_output.put_line('    ROLLBACK;');
  dbms_output.put_line('    v_errC:=substr(sqlcode,1,20);');
  dbms_output.put_line('    v_errD:=substr(sqlerrm,1,200);');
  dbms_output.put_line('    p_mn_grabar_error_bd(v_errC, v_errD, ''ADM. ' || SUBSTR(p_tabla,4,LENGTH(p_tabla)) || ''', ''P_MN_GRABAR_' || SUBSTR(p_tabla,4,LENGTH(p_tabla)) || ''', v_sql, p_login_usr, v_id_log);');
  dbms_output.put_line('    p_res :=''ERROR. Avise a TI. LOG generado #'' || v_id_log;');

  dbms_output.put_line('END;');
END IF;
    
END;
/


DROP PROCEDURE CITYTRUCK.P_GRABAR_ERROR_BD;

CREATE OR REPLACE PROCEDURE CITYTRUCK.p_grabar_error_bd( 
 p_errC      CityTruck.sg_aux_log_errores.cod_error%type,
 p_errD      CityTruck.sg_aux_log_errores.desc_error%type,
 p_modulo    CityTruck.sg_aux_log_errores.modulo%type,
 p_nombre_sp CityTruck.sg_aux_log_errores.nombre_sp%TYPE,
 p_cad_sql   CityTruck.sg_aux_log_errores.cad_sql%type,
 p_login_usr   VARCHAR2,   -- Login del usuario que realiza la operacion
 p_id_log OUT NUMBER  -- Mensaje de OK ("1") o Descripcion del error
)
/*
 Finalidad: Procedimiento que graba un error ocurrido al realizar una operacion en la BD (En el SisMan)
 Recibe: parametros del error y usr que estaba ejecutando el proceso
 Retorna: --
 Fecha Creacion: 26/07/2013
 Autor: Henry Terceros
 */
IS
  v_id_log  CityTruck.sg_aux_log_errores.id_log%type;

  PRAGMA AUTONOMOUS_TRANSACTION; -- Para que solo haga el COMMIT de las operaciones de este SP
BEGIN
  SELECT CityTruck.q_sg_aux_log_errores.nextval INTO v_id_log FROM dual;
  
  INSERT INTO CityTruck.sg_aux_log_errores(id_log, login_usr, fecha, modulo, nombre_sp, cod_error, desc_error, cad_sql) 
  VALUES(v_id_log, p_login_usr, SYSDATE, p_modulo, p_nombre_sp, p_errC, p_errD, substr(p_cad_sql,1,1000));
  COMMIT;
  
  p_id_log := v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACT_CONSUMO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACT_CONSUMO(
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_consumo NUMBER:=0;
 v_consumo_bs NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  IF v_res='0' THEN
      DELETE FROM SG_CLIENTE_CONSUMO_COMBUSTIBLE;
      COMMIT;
      FOR   x IN (SELECT *  FROM SG_CLIENTES_CONSUMO ) LOOP
                FOR y IN (SELECT * FROM SG_COMBUSTIBLES ) LOOP
                      SELECT SUM(IMPORTE_BS)  into v_consumo_bs FROM SG_CONSUMOS WHERE ID_CLIENTE = x.ID_CLIENTE AND ID_COMBUSTIBLE = y.ID_COMBUSTIBLE;
                       SELECT SUM(IMPORTE_LTS )  into v_consumo FROM SG_CONSUMOS WHERE ID_CLIENTE = x.ID_CLIENTE AND ID_COMBUSTIBLE = y.ID_COMBUSTIBLE;
                       INSERT INTO SG_CLIENTE_CONSUMO_COMBUSTIBLE (ID_TABLA ,ID_CLIENTE, ID_COMBUSTIBLE ,CLIENTE  ,COMBUSTIBLE ,CONSUMO ,CONSUMO_BS )
                       VALUES (Q_SG_TABLA_TMP.nextval ,x.ID_CLIENTE , y.ID_COMBUSTIBLE,x.NOMBRE ,y.NOMBRE, v_consumo , v_consumo_bs );
                END LOOP;
        
      END LOOP;
      
      v_res := '1';
      commit;
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Consumos','P_SG_ACT_CONSUMO','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_CLIENTE;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_CLIENTE(
p_id_cliente SG_KARDEX_CLIENTE.ID_CLIENTE%type,
p_fecha SG_KARDEX_CLIENTE.FECHA%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_saldo  SG_KARDEX_CLIENTE.SALDO%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
    --1paso Obtener ultimo saldo del kardex cliente
                    select count(1) into v_cnt from SG_KARDEX_CLIENTE 
                    where ID_CLIENTE  = p_id_cliente
                    and FECHA  < p_fecha;
                     if v_cnt = 0 then
                        v_saldo :=0;
                     else
                        SELECT SALDO  INTO v_saldo
                        FROM(
                        select COALESCE(SALDO ,0) SALDO ,ROW_NUMBER() OVER( order by FECHA  desc, ID_KARDEX  desc )  as ROWN,FECHA  ,ID_KARDEX  
                        from SG_KARDEX_CLIENTE  
                        where ID_CLIENTE  = p_ID_CLIENTE 
                        and FECHA  < p_fecha
                        ) where ROWN =1;
                     end if;
                     
                     FOR x IN (SELECT * FROM  SG_KARDEX_CLIENTE  
                        WHERE ID_CLIENTE   = p_ID_CLIENTE  AND
                        FECHA   >= p_fecha
                        order by FECHA   ASC ,ID_KARDEX  ASC ) LOOP 
                        v_saldo := v_saldo + x.CONSUMO   - x.AMORTIZACION  ;
                        update SG_KARDEX_CLIENTE  set SALDO = v_saldo  where ID_KARDEX   = x.ID_KARDEX  ;
                    END LOOP;
                    UPDATE SG_CLIENTES set SALDO = v_saldo WHERE ID_CLIENTE = p_ID_CLIENTE;
                    COMMIT;
    --hacer recorrer todo el el kardex apartir de la fecha ingresada 
    --update saldo = saldo anterior + Consumo - amortizacion
    v_res:= '1';
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Cuentas por Cobrar','P_SG_GUARDAR_CUENTA_PC','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_COMBUSTIBLE;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_COMBUSTIBLE(
p_fecha SG_KARDEX_COMBUSTIBLE .FECHA%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_carga NUMBER := 0;
 v_res VARCHAR2(1000):='0';
 v_aux  VARCHAR2(1000):='0';
 v_saldo_gas  SG_KARDEX_COMBUSTIBLE.SALDO_INICIAL%type;
 v_saldo  SG_KARDEX_COMBUSTIBLE.SALDO_INICIAL%type;
 v_saldo_die  SG_KARDEX_COMBUSTIBLE.SALDO_INICIAL%type;
 v_id_kardex SG_KARDEX_COMBUSTIBLE.ID_KARDEX%type; 
 v_venta  SG_KARDEX_COMBUSTIBLE.VENTAS%type;
 v_compra  SG_KARDEX_COMBUSTIBLE.COMPRAS%type;
 v_ajuste  SG_KARDEX_COMBUSTIBLE.AJUSTES%type; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
    --1paso Obtener ultimo saldo del kardex cliente
                    select count(1) into v_cnt from SG_KARDEX_COMBUSTIBLE  
                    WHERE FECHA  <p_fecha;
                     if v_cnt = 0 then
                        SELECT SALDO_INICIAL INTO v_saldo_gas FROM SG_TANQUES WHERE ID_COMBUSTIBLE = 1;
                        SELECT SALDO_INICIAL INTO v_saldo_die FROM SG_TANQUES WHERE ID_COMBUSTIBLE = 2;
                     --  v_saldo_gas :=10000; SG_TANQUES 
                      --  v_saldo_die := 20000;
                     else
                        SELECT ACUMULADOS    INTO v_saldo_gas
                        FROM(
                        select COALESCE(ACUMULADOS  ,0) ACUMULADOS  ,ROW_NUMBER() OVER( order by FECHA  desc, ID_KARDEX  desc )  as ROWN,FECHA  ,ID_KARDEX  
                        from SG_KARDEX_COMBUSTIBLE   
                        WHERE FECHA  < p_fecha and ID_COMBUSTIBLE = 1 
                        ) where ROWN =1;
                        
                        SELECT ACUMULADOS    INTO v_saldo_die
                        FROM(
                        select COALESCE(ACUMULADOS  ,0) ACUMULADOS  ,ROW_NUMBER() OVER( order by FECHA  desc, ID_KARDEX  desc )  as ROWN,FECHA  ,ID_KARDEX  
                        from SG_KARDEX_COMBUSTIBLE 
                        WHERE FECHA  < p_fecha and ID_COMBUSTIBLE = 2
                        ) where ROWN =1;
                     end if;
                    

                     --PARA GASOLINA
                     FOR x IN (
                            SELECT trunc (p_fecha,'mm') + rownum -1 as FECHA
                        from dual
                        where to_char(p_fecha,'MON')=to_char(TRUNC (p_fecha, 'MON')+rownum-1,'MON')
                        connect by level <= 31
--                         SELECT FECHA FROM  SG_POS_TURNOS    
--                            WHERE 
--                            FECHA   >=p_fecha
--                            GROUP BY FECHA  order by FECHA   ASC
                      ) LOOP 
                      
                      --vamos a verificar si existe kardex
                       select count(1) into v_cnt from SG_KARDEX_COMBUSTIBLE WHERE FECHA = x.FECHA;
                       IF v_cnt > 0 THEN
                            --existe kardex y se obtendra el idde kardex para gasolina primeramente
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_compra := 0;
                            END IF;
                            --ajustes
                            SELECT count(1) INTO v_cnt FROM SG_AJUSTES_TANQUE  WHERE ID_TANQUE  =1 AND FECHA = x.FECHA; 
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD) into v_ajuste FROM SG_AJUSTES_TANQUE WHERE ID_TANQUE =1 AND FECHA = x.FECHA GROUP BY FECHA;
--                                IF v_ajuste < 0 THEN
--                                    v_ajuste := v_ajuste * -1;
--                                END IF;
                            ELSE 
                                v_ajuste := 0;
                            END IF;
                            
                            SELECT COUNT(1) into v_cnt FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 1 ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 1 GROUP BY pos.FECHA; 
                            ELSE 
                                v_venta := 0;
                            END IF;
                            v_saldo := v_saldo_gas + v_compra  - v_venta + v_ajuste ;
                            select ID_KARDEX  into v_id_kardex from SG_KARDEX_COMBUSTIBLE WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA;
                            UPDATE SG_KARDEX_COMBUSTIBLE SET SALDO_INICIAL = v_saldo_gas ,COMPRAS  = v_compra , VENTAS =  v_venta  ,ACUMULADOS = v_saldo ,AJUSTES = v_ajuste  WHERE ID_KARDEX = v_id_kardex;
                            v_saldo_gas := v_saldo;
                            
                            --kardex diesel
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_compra := 0;
                            END IF;
                            
                             --ajustes
                             SELECT count(1) INTO v_cnt FROM SG_AJUSTES_TANQUE  WHERE ID_TANQUE  = 2 AND FECHA = x.FECHA; 
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD) into v_ajuste FROM SG_AJUSTES_TANQUE WHERE ID_TANQUE =2 AND FECHA = x.FECHA GROUP BY FECHA;
--                               IF v_ajuste < 0 THEN
--                                    v_ajuste := v_ajuste * -1;
--                                END IF; 
                            ELSE 
                                v_ajuste := 0;
                            END IF;
                            
                             SELECT COUNT(1) into v_cnt FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 GROUP BY pos.FECHA; 
                            ELSE 
                                v_venta := 0;
                            END IF;
                            
                         --   SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_TURNOS  pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 GROUP BY pos.FECHA; 
                            v_saldo := v_saldo_die + v_compra - v_venta  + v_ajuste;
                            select ID_KARDEX  into v_id_kardex from SG_KARDEX_COMBUSTIBLE WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA;
                            UPDATE SG_KARDEX_COMBUSTIBLE SET SALDO_INICIAL = v_saldo_die ,COMPRAS  = v_compra , VENTAS =  v_venta  ,ACUMULADOS = v_saldo , AJUSTES = v_ajuste WHERE ID_KARDEX = v_id_kardex;
                            v_saldo_die := v_saldo;
                       ELSE 
                             v_aux := 'no';
                            --gasolina
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE
                                v_compra := 0;
                            END IF;
                               v_aux := 'compa';
                            --ajustes
                           SELECT count(1) INTO v_cnt FROM SG_AJUSTES_TANQUE  WHERE ID_TANQUE  = 1 AND FECHA = x.FECHA; 
                            IF v_cnt > 0 THEN
                                 SELECT SUM(CANTIDAD) into v_ajuste FROM SG_AJUSTES_TANQUE WHERE ID_TANQUE =1 AND FECHA = x.FECHA GROUP BY FECHA;
--                                IF v_ajuste < 0 THEN
--                                    v_ajuste := v_ajuste * -1;
--                                END IF;
                            ELSE 
                                v_ajuste := 0;
                            END IF;
                             v_aux := 'ajuste';
                             
                              SELECT COUNT(1) into v_cnt FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 1 ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 1 GROUP BY pos.FECHA; 
                            ELSE 
                                v_venta := 0;
                            END IF;
                            
                           -- SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_TURNOS  pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 1 GROUP BY pos.FECHA; 
                            v_saldo := v_saldo_gas + v_compra - v_venta + v_ajuste;
                           v_aux := 'total';
                            INSERT INTO SG_KARDEX_COMBUSTIBLE (ID_KARDEX ,ID_COMBUSTIBLE, FECHA, SALDO_INICIAL, COMPRAS ,VENTAS, AJUSTES, ACUMULADOS )
                            VALUES (Q_SG_KARDEX_COMBUSTIBLE.nextval , 1 , x.FECHA , v_saldo_gas , v_compra , v_venta  , v_ajuste ,v_saldo );
                            --select ID_KARDEX  into v_id_kardex from SG_KARDEX_COMBUSTIBLE_MN WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA;
                            --UPDATE SG_KARDEX_COMBUSTIBLE_MN SET SALDO_INICIAL = v_saldo_gas ,COMPRAS  = v_compra , VENTAS = v_venta ,ACUMULADOS = v_saldo WHERE ID_KARDEX = v_id_kardex;
                            v_saldo_gas := v_saldo;
                             v_aux := 'Insert';
                            --diesel
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE
                                v_compra := 0;
                            END IF;
                             v_aux := 'compra';
                            --ajustes
                            SELECT count(1) INTO v_cnt FROM SG_AJUSTES_TANQUE  WHERE ID_TANQUE  = 2 AND FECHA = x.FECHA; 
                            IF v_cnt > 0 THEN
                                 SELECT SUM(CANTIDAD) into v_ajuste FROM SG_AJUSTES_TANQUE WHERE ID_TANQUE =2 AND FECHA = x.FECHA GROUP BY FECHA;
--                                IF v_ajuste < 0 THEN
--                                    v_ajuste := v_ajuste * -1;
--                                END IF;
                            ELSE 
                                v_ajuste := 0;
                            END IF;
                             v_aux := 'ajsutecompra';
                            
                             SELECT COUNT(1) into v_cnt FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_TURNOS   pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 GROUP BY pos.FECHA; 
                            ELSE 
                                v_venta := 0;
                            END IF;
                            
                            --SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_TURNOS  pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 GROUP BY pos.FECHA; 
                            v_saldo := v_saldo_die + v_compra - v_venta + v_ajuste ;
                             v_aux := 'pasooooo';
                            INSERT INTO SG_KARDEX_COMBUSTIBLE (ID_KARDEX ,ID_COMBUSTIBLE, FECHA, SALDO_INICIAL, COMPRAS ,VENTAS, AJUSTES, ACUMULADOS )
                            VALUES (Q_SG_KARDEX_COMBUSTIBLE.nextval , 2 , x.FECHA , v_saldo_die , v_compra ,  v_venta  , v_ajuste ,v_saldo );
                            --select ID_KARDEX  into v_id_kardex from SG_KARDEX_COMBUSTIBLE_MN WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA;
                            --UPDATE SG_KARDEX_COMBUSTIBLE_MN SET SALDO_INICIAL = v_saldo_gas ,COMPRAS  = v_compra , VENTAS = v_venta ,ACUMULADOS = v_saldo WHERE ID_KARDEX = v_id_kardex;
                            v_saldo_die := v_saldo;
                        --commit;
                       END IF;
                        
                        
                       -- v_saldo := v_saldo + x.INGRESO    - x.EGRESO   ;
                        --update SG_KARDEX_EFECTIVO  set SALDO = v_saldo  where ID_KARDEX   = x.ID_KARDEX  ;
                         v_res := '1';
                    END LOOP;
                      IF v_res = '1' THEN
                      --  UPDATE SG_CAJAS     SET SALDO   =v_saldo  WHERE ID_CAJA     =  p_ID_CAJA   ;
                         COMMIT;
                      END IF;
    --hacer recorrer todo el el kardex apartir de la fecha ingresada 
    --update saldo = saldo anterior + Consumo - amortizacion
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Combustible','P_SG_ACT_KARDEX_COMBUSTIBLE','-',v_aux,v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_COMBUSTIBLE_MN;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_COMBUSTIBLE_MN(
p_fecha SG_KARDEX_EFECTIVO.FECHA%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_carga NUMBER := 0;
 v_saldo_gas  SG_KARDEX_COMBUSTIBLE_MN.SALDO_INICIAL%type;
 v_saldo  SG_KARDEX_COMBUSTIBLE_MN.SALDO_INICIAL%type;
 v_saldo_die  SG_KARDEX_COMBUSTIBLE_MN.SALDO_INICIAL%type;
 v_id_kardex SG_KARDEX_COMBUSTIBLE_MN.ID_KARDEX%type; 
 v_venta  SG_KARDEX_COMBUSTIBLE_MN.VENTAS%type;
 v_compra  SG_KARDEX_COMBUSTIBLE_MN.COMPRAS%type;
 v_ajuste  SG_KARDEX_COMBUSTIBLE_MN.AJUSTES%type; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
    --1paso Obtener ultimo saldo del kardex cliente
                    select count(1) into v_cnt from SG_KARDEX_COMBUSTIBLE_MN  
                    WHERE FECHA  <p_fecha;
                     if v_cnt = 0 then
                        SELECT SALDO_INICIAL_MN INTO v_saldo_gas FROM SG_TANQUES WHERE ID_COMBUSTIBLE = 1;
                        SELECT SALDO_INICIAL_MN INTO v_saldo_die FROM SG_TANQUES WHERE ID_COMBUSTIBLE = 2;
                     --  v_saldo_gas :=10000; SG_TANQUES 
                      --  v_saldo_die := 20000;
                     else
                        SELECT ACUMULADOS    INTO v_saldo_gas
                        FROM(
                        select COALESCE(ACUMULADOS  ,0) ACUMULADOS  ,ROW_NUMBER() OVER( order by FECHA  desc, ID_KARDEX  desc )  as ROWN,FECHA  ,ID_KARDEX  
                        from SG_KARDEX_COMBUSTIBLE_MN   
                        WHERE FECHA  < p_fecha and ID_COMBUSTIBLE = 1 
                        ) where ROWN =1;
                        
                        SELECT ACUMULADOS    INTO v_saldo_die
                        FROM(
                        select COALESCE(ACUMULADOS  ,0) ACUMULADOS  ,ROW_NUMBER() OVER( order by FECHA  desc, ID_KARDEX  desc )  as ROWN,FECHA  ,ID_KARDEX  
                        from SG_KARDEX_COMBUSTIBLE_MN   
                        WHERE FECHA  < p_fecha and ID_COMBUSTIBLE = 2
                        ) where ROWN =1;
                     end if;
                      --para recuperar la carga muerta de Diesel
                     SELECT count(*) INTO v_cnt FROM SG_CARGA_MUERTA  WHERE FECHA = p_fecha AND ID_COMBUSTIBLE = 2 ;
                      IF v_cnt > 0 THEN
                        SELECT SUM(CARGA ) into v_carga FROM SG_CARGA_MUERTA  WHERE ID_COMBUSTIBLE = 2 AND FECHA = p_fecha GROUP BY FECHA;
                        v_saldo_die := v_saldo_die + v_carga;
                      END IF;
                       --para recuperar la carga muerta de GASOLINA
                     SELECT count(*) INTO v_cnt FROM SG_CARGA_MUERTA  WHERE FECHA = p_fecha AND ID_COMBUSTIBLE = 1 ;
                      IF v_cnt > 0 THEN
                        SELECT SUM(CARGA ) into v_carga FROM SG_CARGA_MUERTA  WHERE ID_COMBUSTIBLE = 1 AND FECHA = p_fecha GROUP BY FECHA;
                        v_saldo_gas := v_saldo_gas + v_carga;
                      END IF;
                     --PARA GASOLINA
                    --vamos hacer recoger todas las fechas de la fecha mencionada
                     FOR x IN (
                        SELECT trunc (p_fecha,'mm') + rownum -1 as FECHA
                        from dual
                        where to_char(p_fecha,'MON')=to_char(TRUNC (p_fecha, 'MON')+rownum-1,'MON')
                        connect by level <= 31
                      ) LOOP 
                      
                      --vamos a verificar si existe kardex
                       select count(1) into v_cnt from SG_KARDEX_COMBUSTIBLE_MN WHERE FECHA = x.FECHA;
                       IF v_cnt > 0 THEN
                            --existe kardex y se obtendra el idde kardex para gasolina primeramente
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_compra := 0;
                            END IF;
                            SELECT count(1) into v_cnt FROM SG_FACTURAS_MN  WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA ;
                                IF v_cnt > 0 THEN
                                SELECT SUM(LITROS) into v_venta FROM SG_FACTURAS_MN WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_venta := 0;
                            END IF;
                             select ID_KARDEX  into v_id_kardex from SG_KARDEX_COMBUSTIBLE_MN WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA;
                             v_saldo := v_saldo_gas + v_compra - v_venta ;
                            UPDATE SG_KARDEX_COMBUSTIBLE_MN SET SALDO_INICIAL = v_saldo_gas ,COMPRAS  = v_compra , VENTAS = v_venta  ,ACUMULADOS = v_saldo WHERE ID_KARDEX = v_id_kardex;
                            v_saldo_gas := v_saldo;
                            
                            --kardex diesel
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_compra := 0;
                            END IF;
                           SELECT count(1) into v_cnt FROM SG_FACTURAS_MN  WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA ;
                                IF v_cnt > 0 THEN
                                SELECT SUM(LITROS) into v_venta FROM SG_FACTURAS_MN WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_venta := 0;
                            END IF;
                            --SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_DIA_MN  pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 GROUP BY pos.FECHA; 
                            v_saldo := v_saldo_die + v_compra -  v_venta  ;
                            select ID_KARDEX  into v_id_kardex from SG_KARDEX_COMBUSTIBLE_MN WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA;
                            UPDATE SG_KARDEX_COMBUSTIBLE_MN SET SALDO_INICIAL = v_saldo_die ,COMPRAS  = v_compra , VENTAS = v_venta  ,ACUMULADOS = v_saldo WHERE ID_KARDEX = v_id_kardex;
                            v_saldo_die := v_saldo;
                       ELSE 
                            --gasolina
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE
                                v_compra := 0;
                            END IF;
                           SELECT count(1) into v_cnt FROM SG_FACTURAS_MN  WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA ;
                                IF v_cnt > 0 THEN
                                SELECT SUM(LITROS) into v_venta FROM SG_FACTURAS_MN WHERE ID_COMBUSTIBLE = 1 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_venta := 0;
                            END IF;
                          --  SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_DIA_MN  pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 1 GROUP BY pos.FECHA; 
                            v_saldo := v_saldo_gas + v_compra - v_venta ;
                            INSERT INTO SG_KARDEX_COMBUSTIBLE_MN (ID_KARDEX ,ID_COMBUSTIBLE, FECHA, SALDO_INICIAL, COMPRAS ,VENTAS, AJUSTES, ACUMULADOS )
                            VALUES (Q_SG_KARDEX_COMBUSTIBLE_MN.nextval , 1 , x.FECHA , v_saldo_gas , v_compra , v_venta , 0 ,v_saldo );
                           v_saldo_gas := v_saldo;
                            
                            --diesel
                            SELECT count(1) into v_cnt FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA ;
                            IF v_cnt > 0 THEN
                                SELECT SUM(CANTIDAD ) into v_compra FROM SG_COMPRAS WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE
                                v_compra := 0;
                            END IF;
                           SELECT count(1) into v_cnt FROM SG_FACTURAS_MN  WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA ;
                                IF v_cnt > 0 THEN
                                SELECT SUM(LITROS) into v_venta FROM SG_FACTURAS_MN WHERE ID_COMBUSTIBLE = 2 AND FECHA = x.FECHA GROUP BY FECHA;
                            ELSE 
                                v_venta := 0;
                            END IF;
                            --SELECT SUM(pos.TOTAL ) into v_venta FROM SG_POS_DIA_MN  pos , SG_POS  po WHERE pos.ID_POS = po.ID_POS AND pos.FECHA = x.FECHA AND po.ID_COMBUSTIBLE = 2 GROUP BY pos.FECHA; 
                            v_saldo := v_saldo_die + v_compra - v_venta ;
                            INSERT INTO SG_KARDEX_COMBUSTIBLE_MN (ID_KARDEX ,ID_COMBUSTIBLE, FECHA, SALDO_INICIAL, COMPRAS ,VENTAS, AJUSTES, ACUMULADOS )
                            VALUES (Q_SG_KARDEX_COMBUSTIBLE_MN.nextval , 2 , x.FECHA , v_saldo_die , v_compra , v_venta  , 0 ,v_saldo );
                            v_saldo_die := v_saldo;
                        --commit;
                       END IF;
                        
                  
                         v_res := '1';
                    END LOOP;
                      IF v_res = '1' THEN
                         COMMIT;
                      END IF;
    --hacer recorrer todo el el kardex apartir de la fecha ingresada 
    --update saldo = saldo anterior + Consumo - amortizacion
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Combustible','P_SG_ACT_KARDEX_COMBUSTIBLE_MN','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_EFECTIVO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACT_KARDEX_EFECTIVO(
p_id_caja SG_KARDEX_EFECTIVO.ID_CAJA %type,
p_fecha SG_KARDEX_EFECTIVO.FECHA%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_saldo  SG_KARDEX_EFECTIVO.SALDO%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
    --1paso Obtener ultimo saldo del kardex cliente
                    select count(1) into v_cnt from SG_KARDEX_EFECTIVO 
                    where ID_CAJA   = p_id_caja
                    and FECHA  <p_fecha;
                     if v_cnt = 0 then
                        v_saldo :=0;
                     else
                        SELECT SALDO  INTO v_saldo
                        FROM(
                        select COALESCE(SALDO ,0) SALDO ,ROW_NUMBER() OVER( order by FECHA  desc, ID_KARDEX  desc )  as ROWN,FECHA  ,ID_KARDEX  
                        from SG_KARDEX_EFECTIVO  
                        where ID_CAJA   = p_id_caja
                        and FECHA  < p_fecha
                        ) where ROWN =1;
                     end if;
                     
                     FOR x IN (SELECT * FROM  SG_KARDEX_EFECTIVO  
                        WHERE ID_CAJA   = p_ID_CAJA  AND
                        FECHA   >= p_fecha
                        order by FECHA   ASC ,ID_KARDEX  ASC ) LOOP 
                        v_saldo := v_saldo + x.INGRESO    - x.EGRESO   ;
                        update SG_KARDEX_EFECTIVO  set SALDO = v_saldo  where ID_KARDEX   = x.ID_KARDEX  ;
                         v_res := '1';
                    END LOOP;
                      IF v_res = '1' THEN
                        UPDATE SG_CAJAS     SET SALDO   =v_saldo  WHERE ID_CAJA     =  p_ID_CAJA   ;
                         COMMIT;
                    END IF;
    --hacer recorrer todo el el kardex apartir de la fecha ingresada 
    --update saldo = saldo anterior + Consumo - amortizacion
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Efectivo','P_SG_ACT_KARDEX_EFECTIVO','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACT_VENTAS_UPD;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACT_VENTAS_UPD(
 p_fecha       IN SG_VENTAS_DIARIAS.FECHA%TYPE,
 p_turno IN SG_VENTAS_DIARIAS.TURNO%TYPE,
 p_responsable IN SG_VENTAS_DIARIAS.RESPONSABLE%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar venta diaria
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_total NUMBER:=0;
  v_total_venta NUMBER:=0;
  v_id_kardex  NUMBER:=0;
  v_id_venta  SG_VENTAS_DIARIAS.ID_VENTA%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_turno IS NULL OR p_id_usr IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt = 0 THEN
      v_res := 'No Existe Registros POS_TURNOS Revise por favor';
    ELSE
         SELECT SUM(TOTAL ) INTO v_total FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
         SELECT SUM(TOTAL_VENTA) INTO v_total_venta FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
         SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_DIARIAS WHERE TURNO = p_TURNO AND FECHA = p_FECHA;
         IF v_cnt > 0 THEN
                    SELECT ID_VENTA into v_id_venta FROM SG_VENTAS_DIARIAS WHERE TURNO = p_TURNO AND FECHA = p_FECHA;
                    UPDATE SG_VENTAS_DIARIAS SET TOTAL = v_total WHERE TURNO = p_TURNO AND FECHA = p_FECHA;
                    UPDATE SG_KARDEX_EFECTIVO SET ID_CAJA =  1,
                                      FECHA = p_fecha,
                                      INGRESO = v_total_venta
                    WHERE ID_OPERACION = v_id_venta AND OPERACION = 'VENTA';
                    v_res := '0';
         ELSE
                    SELECT Q_SG_VENTAS_DIARIAS.nextval INTO v_id_venta FROM DUAL;
                    INSERT INTO SG_VENTAS_DIARIAS  (ID_VENTA ,TURNO, RESPONSABLE ,FECHA ,TOTAL ) VALUES
                    (v_id_venta ,p_TURNO, p_RESPONSABLE ,p_FECHA ,v_TOTAL);
                     INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
                     VALUES (Q_SG_KARDEX_EFECTIVO.nextval , 1 , v_id_venta , 'VENTA' ,p_fecha,'VENTA  FECHA : '||TO_CHAR(p_fecha , 'DD/MM/YYYY') ||  '- TURNO :'||p_turno,v_total_venta,0,0,p_id_usr,sysdate );
                     v_res := '0';
         END IF; 
            IF v_res = '0' THEN
                  COMMIT;
                    P_SG_ACT_KARDEX_EFECTIVO(1,p_fecha,p_id_usr,v_res);
                  v_res := '1';
              ELSE
                ROLLBACK;
                END IF;
    END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_TURNOS','P_SG_GENERAR_POS_TURNOS','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ALTA_LISTA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ALTA_LISTA(
 p_lista       IN SG_LISTAS.LISTA%TYPE,
 p_descripcion IN SG_LISTAS.DESCRIPCION%TYPE,
 p_tam_limite  IN SG_LISTAS.TAM_LIMITE%TYPE,
 p_tipo_valor  IN SG_LISTAS.TIPO_VALOR%TYPE,
 p_mayus_minus IN SG_LISTAS.MAYUS_MINUS%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para registrar el alta la LISTA
 Recibe:  p_lista  .. p_num_proy -> Parametros del elemento
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Henry Terceros 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_lista IS NULL OR p_descripcion IS NULL OR p_tam_limite IS NULL OR p_tipo_valor IS NULL OR p_mayus_minus IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos que la LISTA no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_listas WHERE lista = TRIM(p_lista);
    IF v_cnt > 0 THEN
      v_res := 'Ya existe la lista con dicho nombre.';
    END IF;
  END IF;
  IF v_res='0' THEN
      -- Creamos la LISTA
      INSERT INTO SG_listas(id_lista, lista, descripcion, tam_limite, tipo_valor, mayus_minus,estado)
      VALUES(q_SG_listas.nextval, p_lista, p_descripcion, p_tam_limite, p_tipo_valor, p_mayus_minus, 'A');

      COMMIT;
      
      v_res := '1';
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Alta Lista','P_SG_ALTA_LISTA','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_AMORTIZACION;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_AMORTIZACION(
 p_id CITYTRUCK.SG_AMORTIZACIONES.ID_AMORTIZACION%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_fecha SG_AMORTIZACIONES.FECHA%type;
 v_id_cliente SG_AMORTIZACIONES.ID_CLIENTE%type;  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      SELECT FECHA, ID_CLIENTE  INTO v_fecha,v_id_cliente FROM SG_AMORTIZACIONES  WHERE ID_AMORTIZACION  = p_id;
      DELETE FROM  SG_AMORTIZACIONES   where ID_AMORTIZACION  = p_id;
      DELETE FROM SG_KARDEX_CLIENTE  WHERE ID_OPERACION = p_id AND OPERACION = 'AMORTIZACION';      
      v_res := '1';
      
  END IF;
   IF v_res = '1' THEN
     P_SG_ACT_KARDEX_CLIENTE(v_id_cliente,v_fecha,p_id_usr,v_res);
     COMMIT;
      v_res := '1' ;
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Amortizacion','P_SG_ELIMINAR_AMORTIZACION','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CAJA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CAJA(
 p_id CITYTRUCK.SG_CAJAS.ID_CAJA %type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0'; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      SELECT COUNT(*) INTO v_cnt FROM SG_KARDEX_EFECTIVO 
      WHERE ID_CAJA = p_id AND ID_OPERACION <> p_id AND OPERACION <> 'CAJA' ;
      
      IF v_cnt > 0 THEN
        v_res := 'Existen transacciones asociadas a esta caja.';
      ELSE
        DELETE FROM SG_KARDEX_EFECTIVO WHERE ID_CAJA = p_id AND ID_OPERACION = p_id AND OPERACION = 'CAJA';
        DELETE FROM  SG_CAJAS  WHERE ID_CAJA = p_id;    
        v_res := '1';  
      END IF;  
            
  END IF;
   IF v_res = '1' THEN
     COMMIT;
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Efectivo','P_SG_ELIMINAR_CAJA','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CLIENTE;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CLIENTE(
 p_id CITYTRUCK.SG_CLIENTES.ID_CLIENTE%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0'; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      DELETE FROM  SG_CLIENTES  where ID_CLIENTE  = p_id;     
      v_res := '1';
      
  END IF;
   IF v_res = '1' THEN
     COMMIT;
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Cuentas por Cobrar','P_SG_ELIMINAR_CLIENTE','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CLIENTE_CONSUMO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CLIENTE_CONSUMO(
 p_id_cliente CITYTRUCK.SG_CLIENTES_CONSUMO.ID_CLIENTE%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id_cliente IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  -- Verificamos  si tiene algun registro en Consumo
  IF v_res  = '0' THEN
        SELECT COUNT(*) INTO v_cnt FROM SG_CONSUMOS WHERE ID_CLIENTE = p_ID_CLIENTE ;
        IF v_cnt > 0 THEN
            v_res := 'No puede Eliminar al Cliente Consumo tiene Registros de Consumo...';
        END IF;
  END IF;
  IF v_res='0' THEN
      
      DELETE FROM  SG_CLIENTES_CONSUMO     where ID_CLIENTE    = p_id_cliente  ;
    
      -- Creamos el nodo en el arbol
      
      COMMIT;
      
      v_res := '1';
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Consumos','P_SG_ELIMINAR_CONSUMO','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_COMPRA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_COMPRA(
 p_id CITYTRUCK.SG_COMPRAS.ID_COMPRA%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_fecha SG_INGRESOS.FECHA%type;
 v_id_caja SG_INGRESOS.ID_CAJA%type;  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      SELECT FECHA, ID_CAJA INTO v_fecha,v_id_caja FROM SG_COMPRAS  WHERE ID_COMPRA  = p_id;
      DELETE FROM SG_DETALLES_COMPRAS WHERE ID_COMPRA  = p_id;
      DELETE FROM  SG_COMPRAS   where ID_COMPRA  = p_id;
      DELETE FROM SG_KARDEX_EFECTIVO WHERE ID_OPERACION = p_id AND OPERACION = 'COMPRA';      
      commit;
      v_res := '1';
      
  END IF;
   IF v_res = '1' THEN
     P_SG_ACT_KARDEX_EFECTIVO(v_id_caja,v_fecha-1 ,p_id_usr,v_res);
     v_res := '1';
     COMMIT;
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Ingresos','P_SG_ELIMINAR_COMPRA','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_DETALLE_COMPRA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_DETALLE_COMPRA(
 p_id CITYTRUCK.SG_DETALLES_COMPRAS.ID_DETALLE%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_id_compra  SG_COMPRAS.ID_COMPRA%type;  
 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      SELECT ID_COMPRA INTO v_id_compra FROM SG_DETALLES_COMPRAS  where ID_DETALLE  = p_id;
      
      
      SELECT count(* ) INTO v_cnt FROM SG_DETALLES_COMPRAS WHERE  ID_COMPRA  = v_id_compra AND ID_DETALLE <> p_id;
      IF v_cnt > 0 THEN
        SELECT SUM(IMPORTE ) INTO v_cnt FROM SG_DETALLES_COMPRAS WHERE  ID_COMPRA  = v_id_compra AND ID_DETALLE <> p_id;
      END IF;
      
      
      DELETE FROM  SG_DETALLES_COMPRAS   where ID_DETALLE  = p_id;
      UPDATE SG_COMPRAS SET TOTAL = IMPORTE  + v_cnt WHERE  ID_COMPRA  = v_id_compra ;
      v_res := '1';
      
  END IF;
   IF v_res = '1' THEN
     COMMIT;
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Compras','P_SG_ELIMINAR_DETALLE_COMPRA','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_EGRESO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_EGRESO(
 p_id CITYTRUCK.SG_EGRESOS.ID_EGRESO %type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_fecha SG_EGRESOS.FECHA%type;
 v_id_caja SG_EGRESOS.ID_CAJA%type;  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      SELECT FECHA, ID_CAJA INTO v_fecha,v_id_caja FROM SG_EGRESOS WHERE ID_EGRESO = p_id;
      DELETE FROM  SG_EGRESOS  where ID_EGRESO = p_id;
      DELETE FROM SG_KARDEX_EFECTIVO WHERE ID_OPERACION = p_id AND OPERACION = 'EGRESO';  
      
      v_res := '1';
  END IF;
   IF v_res = '1' THEN
     P_SG_ACT_KARDEX_EFECTIVO(v_id_caja,v_fecha,p_id_usr,v_res);
     COMMIT;
   END IF;
    v_res := '1' ;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Egresos','P_SG_ELIMINAR_EGRESO','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_INGRESO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_INGRESO(
 p_id CITYTRUCK.SG_INGRESOS.ID_INGRESO %type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_fecha SG_INGRESOS.FECHA%type;
 v_id_caja SG_INGRESOS.ID_CAJA%type;  
 v_id_amortizacion SG_INGRESOS.ID_AMORTIZACION%type;  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      SELECT FECHA, ID_CAJA,ID_AMORTIZACION  INTO v_fecha,v_id_caja,v_id_amortizacion FROM SG_INGRESOS WHERE ID_INGRESO = p_id;
      DELETE FROM  SG_INGRESOS  where ID_INGRESO = p_id;
      DELETE FROM SG_KARDEX_EFECTIVO WHERE ID_OPERACION = p_id AND OPERACION = 'INGRESO';      
      v_res := '1';
      IF v_id_amortizacion IS NOT NULL THEN
            P_SG_ELIMINAR_AMORTIZACION(v_id_amortizacion , p_id_usr,v_res);
      
      END IF;
      
  END IF;
   IF v_res = '1' THEN
     P_SG_ACT_KARDEX_EFECTIVO(v_id_caja,v_fecha,p_id_usr,v_res);
     COMMIT;
      v_res := '1' ;
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Ingresos','P_SG_ELIMINAR_INGRESO','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_PERFIL_OPCION;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_PERFIL_OPCION(
 p_id_perfil IN SG_PERFILES_OPCIONES.ID_PERFIL%TYPE,
 p_id_opc  IN SG_PERFILES_OPCIONES.ID_OPC%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id_perfil IS NULL OR p_id_opc IS NULL  THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos que la LISTA no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_PERFILES_OPCIONES  WHERE ID_PERFIL  = p_id_perfil AND ID_OPC =p_id_opc ;
    IF v_cnt = 0 THEN
      v_res := 'No existe Asociacion.';
    END IF;
  END IF;
  IF v_res='0' THEN
      -- Creamos la LISTA
      DELETE FROM SG_PERFILES_OPCIONES  WHERE ID_PERFIL  = p_id_perfil AND ID_OPC =p_id_opc ;

      COMMIT;
      
      v_res := '1';
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Menu Opciones','P_SG_ELIMINAR_PERFIL_OPCION','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_TRANSFERNCIA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_TRANSFERNCIA(
 p_id CITYTRUCK.SG_TRANSFERENCIAS.ID_TRANSFERENCIA%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_fecha SG_TRANSFERENCIAS.FECHA%type;
 v_id_caja_origen SG_TRANSFERENCIAS.ID_CAJA_ORIGEN %type;  
 v_id_caja_destino SG_TRANSFERENCIAS.ID_CAJA_DESTINO%type;  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  
  IF v_res='0' THEN
      
      SELECT FECHA, ID_CAJA_ORIGEN , ID_CAJA_DESTINO   INTO v_fecha,v_id_caja_origen,v_id_caja_destino FROM SG_TRANSFERENCIAS  WHERE ID_TRANSFERENCIA  = p_id;
      DELETE FROM  SG_TRANSFERENCIAS   where ID_TRANSFERENCIA  = p_id;
      DELETE FROM SG_KARDEX_EFECTIVO WHERE ID_OPERACION = p_id AND OPERACION = 'TRANSFERENCIA';      
      v_res := '1';
  END IF;
   IF v_res = '1' THEN
     P_SG_ACT_KARDEX_EFECTIVO(v_id_caja_origen,v_fecha-30,p_id_usr,v_res);
     P_SG_ACT_KARDEX_EFECTIVO(v_id_caja_destino,v_fecha-30,p_id_usr,v_res);
     COMMIT;
      v_res := '1' ;
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo de Transferencia','P_SG_ELIMINAR_TRANSFERNCIA','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GENERAR_AJUSTE_POS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GENERAR_AJUSTE_POS(
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar pos_turnos
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_id_usr IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_AJUSTE_POS  WHERE  FECHA = p_fecha;
    IF v_cnt > 0 THEN
      v_res := 'Ya existe registros en la tabla POS_TURNOs';
    END IF;
  END IF;
   IF v_cnt = 0 THEN
            FOR y IN (SELECT * FROM  SG_POS   ) LOOP
                    EXIT WHEN v_res <> '0';
                    if v_res = '0' THEN
                        INSERT INTO SG_AJUSTE_POS(ID_AJUSTE, ID_POS, FECHA, AJUSTE ,ID_USUARIO, FECHA_REG )
                        VALUES (Q_SG_AJUSTE_POS.nextval, y.ID_POS, p_fecha, 0 ,p_id_usr, sysdate );
                       
                    END IF;
            END LOOP;
            IF v_res = '0' THEN
                  COMMIT;
                  v_res := '1';
              ELSE
                ROLLBACK;
                END IF;
    ELSE      
            v_res := '0';        
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar AJUSTE_POS','P_SG_GENERAR_AJUSTE_PO','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GRABAR_HIST_EDICION_DATOS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GRABAR_HIST_EDICION_DATOS(
 p_id_tabla  IN SG_HIST_EDICION_DATOS.ID_TABLA%TYPE,
 p_tabla  IN SG_HIST_EDICION_DATOS.TABLA%TYPE,
 p_campo  IN SG_HIST_EDICION_DATOS.CAMPO%TYPE,
 p_valor_actual  IN SG_HIST_EDICION_DATOS.VALOR_NUEVO%TYPE,
 p_valor_nuevo  IN SG_HIST_EDICION_DATOS.VALOR_NUEVO%TYPE,
 p_motivo  IN SG_HIST_EDICION_DATOS.MOTIVO%TYPE,
 p_login_usr  IN SG_HIST_EDICION_DATOS.LOGIN_USR%TYPE,
 p_res OUT  VARCHAR2
)
/*
 Finalidad: Procedimiento para grabar un registro de HIST_EDICION_DATOS
 Recibe:  p_id_tabla -> ID del registro que se acaba de Insertar y del cual se requiere guardar su historico.
-- Recibe:  p_id_tabla -> ID del registro que se Inserta / Modifica; Si el valor es mayor a 0 (y diferente de nulo), indica que es una modificacion
             p_tabla  ->  Nombre de la tabla para la que se genera historico
             p_campoID  -> Nombre del Campo ID de la tabla para la que se genera historico
             p_id_usr   -> ID del usuario que realiza la operacion
 Retorna: p_res ->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 30-JUL-13
 Autor: Henry Terceros
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0'; 
 v_sql VARCHAR2(2000);
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_id_tabla IS NULL OR p_tabla IS NULL OR p_campo IS NULL OR p_login_usr IS NULL THEN
      v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Grabamos historico, siempre y cuando el valor nuevo no sea nulo y sea diferente del valor actual (el que esta en la BD)
    IF p_valor_nuevo IS NOT NULL AND (p_valor_actual IS NULL OR p_valor_actual <> p_valor_nuevo ) THEN
        v_sql := 'INSERT INTO SG_HIST_EDICION_DATOS(id_hist, id_tabla, tabla, campo, valor_nuevo, motivo, fecha_reg, login_usr)  ' ||
                     'VALUES(q_SG_hist_edicion_datos.nextval, ' || p_id_tabla || ', ''' || p_tabla || ''', ''' || p_campo || ''', ''' || substr(p_valor_nuevo,1,250) || ''', ''' || p_motivo || ''',SYSDATE ,''' || p_login_usr || ''') '; 
        EXECUTE IMMEDIATE v_sql;
--        COMMIT; -- El commit debera hacerse en el SP desde donde se lo llama !!!
        v_res := '1';
    END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'HIST_EDICION_DATOS','P_SG_GRABAR_HIST_EDICION_DATOS',v_sql,1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GRABAR_LISTAS_ITEMS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GRABAR_LISTAS_ITEMS(
 p_id_tabla  IN SG_LISTAS_ITEMS.ID_TABLA%TYPE,
 p_id_padre  IN SG_LISTAS_ITEMS.ID_PADRE%TYPE,
 p_id_lista  IN SG_LISTAS_ITEMS.ID_LISTA%TYPE,
 p_codigo  IN SG_LISTAS_ITEMS.CODIGO%TYPE,
 p_valor  IN SG_LISTAS_ITEMS.VALOR%TYPE,
 p_estado  IN SG_LISTAS_ITEMS.ESTADO%TYPE,
 p_login_usr   VARCHAR2,  -- Login del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
/*
 Finalidad: Procedimiento para grabar el alta o modificacion de LISTAS_ITEMS
 Recibe: p_id_tabla  -> ID del Item de Lista que se pretende modificar (Si es nuevo, sera 0)
         p_id_padre  -> ID del Item de Lista al que se pretende relacionar el item actual 
         p_id_lista  -> ID de la lista a la que esta asociada este Item
         p_codigo  -> Codigo del Item
         p_valor  -> Valor del Item
         p_estado  -> Estado (A->Activo o I->Inactivo)
         p_login_usr  -> Login del usr que realiza la operacion
 Retorna: p_res ->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 01-AUG-13
 Autor: [nombre] [apellido]
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0'; 
 v_sql VARCHAR2(2000);
 v_sql1 VARCHAR2(200);
 v_tipo_oper VARCHAR2(10);
 v_rg    SG_LISTAS_ITEMS%ROWTYPE;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
 v_id       NUMBER := 0;
BEGIN
  -- Validamos nulos
  IF p_id_tabla IS NOT NULL AND p_id_padre IS NOT NULL  THEN
    v_res := '0'; -- Quiere decir que es una creacion de relacion entre items de listas.
  ELSE
--    v_res := 'Faltan parametros.';
    IF p_id_lista IS NULL OR p_codigo IS NULL OR p_valor IS NULL OR p_estado IS NULL  THEN
      v_res := 'Faltan parametros.';
    END IF;
  END IF;
  -- Para el caso de ALTA, validamos que el registro NO exista
  IF v_res = '0' AND (p_id_tabla = 0 OR p_id_tabla IS NULL ) THEN
      SELECT COUNT (1) INTO v_cnt FROM SG_LISTAS_ITEMS WHERE id_lista = p_id_lista AND (codigo = p_codigo OR valor = p_valor);
      IF v_cnt > 0 THEN
         v_res := 'El elemento ' || p_codigo || '/' || p_valor || ' ya existe en la lista.';
      END IF;
  END IF;
  -- Para el caso de MODIFICACION, validamos que el registro exista
  IF v_res = '0' AND p_id_tabla > 0 THEN
      SELECT COUNT (1) INTO v_cnt FROM SG_LISTAS_ITEMS WHERE id_tabla = p_id_tabla;
      IF v_cnt = 0 THEN
         v_res := 'NO existe el elemento que pretende modificar.';
      ELSE
         SELECT * INTO v_rg FROM SG_LISTAS_ITEMS WHERE id_tabla = p_id_tabla;
      END IF;
  END IF;
  IF v_res='0' THEN
    -- Si se trata de una INSERCION ...
    IF p_id_tabla = 0 OR p_id_tabla IS NULL THEN
        -- Obtenemos el correlativo
        SELECT q_SG_LISTAS_ITEMS.nextval INTO v_id FROM dual;
        -- Creamos el registro
        v_sql:='INSERT INTO SG_LISTAS_ITEMS(id_tabla, id_padre, id_lista, codigo, valor, estado) ' ||
               'VALUES(' || v_id || ', ';
        IF p_id_padre IS NULL THEN
          v_sql:=v_sql || 'NULL, ';
        ELSE
          v_sql:=v_sql || '' || p_id_padre|| ', '; 
        END IF; 
        v_sql:=v_sql || '' || p_id_lista|| ', '; 
        IF p_codigo IS NULL THEN
          v_sql:=v_sql || 'NULL, ';
        ELSE
          v_sql:=v_sql || '''' || p_codigo|| ''', '; 
        END IF; 
        v_sql:=v_sql || '''' || p_valor|| ''', '; 
        v_sql:=v_sql || '''' || p_estado|| ''')'; 
        EXECUTE IMMEDIATE v_sql;
        v_tipo_oper := 'ALTA';
    ELSE
        -- Construimos la consulta de actualizacion
        v_sql := '';
        IF p_id_tabla IS NOT NULL AND (p_id_tabla <> v_rg.id_tabla OR v_rg.id_tabla IS NULL) THEN
            v_sql := v_sql || ' id_tabla=' || p_id_tabla || ',';
        END IF;
        IF p_id_padre <> v_rg.id_padre OR (p_id_padre IS NULL AND v_rg.id_padre IS NOT NULL) OR (p_id_padre IS NOT NULL AND v_rg.id_padre IS NULL) THEN
            v_sql := v_sql || ' id_padre=' || p_id_padre || ',';
        END IF;
        IF p_id_lista IS NOT NULL AND (p_id_lista <> v_rg.id_lista OR v_rg.id_lista IS NULL) THEN
            v_sql := v_sql || ' id_lista=' || p_id_lista || ',';
        END IF;
        IF p_codigo <> v_rg.codigo OR (p_codigo IS NULL AND v_rg.codigo IS NOT NULL) OR (p_codigo IS NOT NULL AND v_rg.codigo IS NULL) THEN
            v_sql := v_sql || ' codigo=''' || p_codigo || ''',';
        END IF;
        IF p_valor IS NOT NULL AND (p_valor <> v_rg.valor OR v_rg.valor IS NULL) THEN
            v_sql := v_sql || ' valor=''' || p_valor || ''',';
        END IF;
        IF p_estado IS NOT NULL AND (p_estado <> v_rg.estado OR v_rg.estado IS NULL) THEN
            v_sql := v_sql || ' estado=''' || p_estado || ''',';
        END IF;
        -- Comprobamos si existe algun dato a modificar. 
        IF v_sql = '' OR v_sql IS NULL THEN         -- Oracle trata actualemente a las cadenas vacias como NULL
            v_res := 'No existe ningun dato diferente a ser modificado.';
        END IF;
        IF v_res = '0' THEN
            v_sql := 'UPDATE SG_LISTAS_ITEMS SET ' || SUBSTR (v_sql, 1, LENGTH (v_sql) - 1) || ' WHERE id_tabla = ' || p_id_tabla;
            EXECUTE IMMEDIATE (v_sql);
            v_tipo_oper := 'EDICION';
        END IF;
    END IF;
    IF v_res = '0' THEN
        -- Grabamos historicos (un registro por cada campo no nulo)
        P_SG_GRABAR_HIST_EDICION_DATOS(v_id, 'SG_LISTAS_ITEMS', 'id_padre', v_rg.id_padre, p_id_padre, v_tipo_oper, p_login_usr, v_res);
        P_SG_GRABAR_HIST_EDICION_DATOS(v_id, 'SG_LISTAS_ITEMS', 'id_lista', v_rg.id_lista, p_id_lista, v_tipo_oper, p_login_usr, v_res);
        P_SG_GRABAR_HIST_EDICION_DATOS(v_id, 'SG_LISTAS_ITEMS', 'codigo', v_rg.codigo, p_codigo, v_tipo_oper, p_login_usr, v_res);
        P_SG_GRABAR_HIST_EDICION_DATOS(v_id, 'SG_LISTAS_ITEMS', 'valor', v_rg.valor, p_valor, v_tipo_oper, p_login_usr, v_res);
        P_SG_GRABAR_HIST_EDICION_DATOS(v_id, 'SG_LISTAS_ITEMS', 'estado', v_rg.estado, p_estado, v_tipo_oper, p_login_usr, v_res);

        COMMIT;
        v_res := '1';
    END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC, v_errD, 'ADM. LISTAS_ITEMS', 'P_SG_GRABAR_LISTAS_ITEMS', v_sql, p_login_usr, v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_AJUSTE_POS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_AJUSTE_POS(
p_id_ajuste SG_AJUSTE_POS.ID_AJUSTE%type,
p_id_pos SG_AJUSTE_POS.ID_POS %type,
p_fecha SG_AJUSTE_POS.FECHA %type,
p_ajuste SG_AJUSTE_POS.AJUSTE%type,
p_id_usr   NUMBER,
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_precio_venta  NUMBER := 0;
 v_precio_compra  NUMBER := 0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
IF p_id_ajuste IS NULL OR p_id_pos IS NULL OR p_fecha IS NULL OR p_ajuste IS NULL OR p_id_usr IS NULL 
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
    SELECT COUNT(*) INTO v_cnt FROM SG_AJUSTE_POS  WHERE ID_AJUSTE   = p_id_ajuste;
    IF v_cnt = 0 THEN
         v_res := 'No existe ese Registro Informar a Administrador de Sistemas';
    ELSE
       UPDATE SG_AJUSTE_POS SET AJUSTE = p_ajuste WHERE ID_AJUSTE = p_id_ajuste ;
       v_res := '0';
    END IF;
    IF v_res = '0' THEN
          COMMIT;
          v_res := '1';
      ELSE
        ROLLBACK;
        END IF;
END IF;
p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Guardar AjustePos','P_SG_GUARDAR_AJUSTE_POS','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_AJUSTE_TANQUE;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_AJUSTE_TANQUE(
p_id_ajuste SG_AJUSTES_TANQUE.ID_AJUSTE%type,
p_id_combustible SG_COMBUSTIBLES.ID_COMBUSTIBLE%type,
p_fecha SG_AJUSTES_TANQUE.FECHA%type, 
p_observacion  SG_AJUSTES_TANQUE.OBSERVACION%type,
p_cantidad SG_AJUSTES_TANQUE.CANTIDAD%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_saldo NUMBER := 0;
  v_saldo_egreso NUMBER := 0;
 v_id_tanque  SG_AJUSTES_TANQUE.ID_TANQUE%type;
 v_id_ajuste SG_AJUSTES_TANQUE.ID_AJUSTE%type;
 v_nro  SG_AJUSTES_TANQUE.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_fecha IS NULL OR p_id_combustible IS NULL OR p_cantidad IS NULL OR p_id_usr IS NULL  
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   if p_id_ajuste = 0 THEN
         --creacion
        IF v_res='0' THEN
                SELECT ID_TANQUE  into v_id_tanque FROM SG_TANQUES   WHERE ID_COMBUSTIBLE  = p_id_combustible;
               v_id_ajuste := Q_SG_AJUSTES_TANQUE.nextval;
                select MAx(NRO_COMP) INTO v_nro FROM SG_AJUSTES_TANQUE ;
                if v_nro is null then
                    v_nro:= 1;
                else 
                     v_nro:= v_nro+ 1;
                end if;
                
                INSERT INTO SG_AJUSTES_TANQUE ( ID_AJUSTE, ID_TANQUE ,NRO_COMP ,FECHA ,CANTIDAD ,OBSERVACION ,ID_USUARIO ,FECHA_REG )
                VALUES  ( v_id_ajuste, v_id_tanque ,v_nro ,p_fecha ,p_cantidad ,p_observacion ,p_id_usr ,sysdate );
            --verificamos saldo
        END IF; 
   ELSE
            UPDATE SG_AJUSTES_TANQUE SET CANTIDAD  = p_cantidad  , OBSERVACION  = p_observacion WHERE ID_AJUSTE  = p_id_ajuste;
            v_id_ajuste := p_id_ajuste;
    END IF;
    
END IF;
    if v_res = '0' THEN
        v_res := '1';
     COMMIT;
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de ajustes','P_SG_GUARDAR_AJUSTE_TANQUE','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_CAJAS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_CAJAS(
p_id_caja SG_CAJAS.ID_CAJA %type,
p_codigo SG_CAJAS.CODIGO%type,
p_nombre  SG_CAJAS.NOMBRE  %type,
p_nro_cuenta SG_CAJAS.NRO_CUENTA  %type,
p_moneda SG_CAJAS.MONEDA  %type,
p_descripcion SG_CAJAS.DESCRIPCION   %type,
p_saldo SG_CAJAS.SALDO   %type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_fecha SG_KARDEX_EFECTIVO.FECHA%type; 
 v_id_caja  SG_CAJAS.ID_CAJA%type;
 v_nro  SG_CAJAS.CODIGO %type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_id_caja IS NULL OR p_nombre IS NULL OR p_nro_cuenta IS NULL OR p_moneda IS NULL OR p_descripcion IS NULL
OR p_saldo IS NULL OR  p_id_usr IS NULL  OR p_codigo IS NULL  
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   if p_id_caja = 0 THEN
         --creacion
         select TO_DATE(TO_CHAR(sysdate, 'MM/DD/YYYY') , 'MM/DD/YYYY')  into v_fecha from dual;
        v_id_caja := Q_SG_CAJAS.nextval;
        select MAx(CODIGO) INTO v_nro FROM SG_CAJAS;
       
        if v_nro is null then
            v_nro:= 0;
        end if;
        INSERT INTO SG_CAJAS  VALUES  (v_id_caja,p_codigo , p_nombre, p_nro_cuenta,
        p_moneda ,p_descripcion ,p_saldo ,p_id_usr, v_fecha );
        
        v_res := '0';
         IF v_res = '0' THEN
             
            INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
             VALUES (Q_SG_KARDEX_EFECTIVO.nextval , v_id_caja , v_id_caja , 'CAJA' ,v_fecha ,'CREACION CUENTA:'||p_nombre,p_saldo,0,0,p_id_usr,sysdate );
          
        END IF;
    ELSE
       
         select TO_DATE(TO_CHAR(sysdate, 'MM/DD/YYYY') , 'MM/DD/YYYY')  into v_fecha from dual;
       UPDATE SG_CAJAS SET CODIGO = p_CODIGO ,NOMBRE =p_NOMBRE , NRO_CUENTA = p_NRO_CUENTA , MONEDA = p_MONEDA , DESCRIPCION = p_DESCRIPCION   
        WHERE ID_CAJA  =  p_ID_CAJA; 
      
        --editar
    END IF;
END IF;
    if v_res = '0' THEN
        v_res := '1';
     COMMIT;
    --  P_SG_ACT_KARDEX_EFECTIVO(v_id_caja, v_fecha ,p_id_usr,v_res);

    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Efectivo','P_SG_GUARDAR_CAJAS','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_CLIENTES;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_CLIENTES(
p_id_cliente SG_CLIENTES.ID_CLIENTE%type,
p_codigo SG_CLIENTES.CODIGO%type,
p_empresa SG_CLIENTES.EMPRESA%type,
p_nit SG_CLIENTES.NIT%type,
p_contacto SG_CLIENTES.CONTACTO%type,
p_telefono SG_CLIENTES.TELEFONO%type,
p_dir SG_CLIENTES.DIRECCION %type,
p_limite SG_CLIENTES.LIMITE %type,

p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_id_cliente SG_CLIENTES.ID_CLIENTE%type;
 v_consumo SG_CLIENTES.CONSUMO %type;
 v_saldo SG_CLIENTES.SALDO %type;
 v_nro  SG_CLIENTES.CODIGO %type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_id_cliente IS NULL OR p_empresa IS NULL OR p_nit IS NULL OR p_contacto IS NULL
OR p_telefono IS NULL OR  p_dir IS NULL OR p_limite IS NULL OR p_id_usr IS NULL
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
    v_consumo:= 0;
    v_saldo:= 0;
   if p_id_cliente = 0 THEN
         --creacion
        v_id_cliente := Q_SG_CLIENTES.nextval;
        select MAx(CODIGO) INTO v_nro FROM SG_CLIENTES;
       
        if v_nro is null then
            v_nro:= 0;
        end if;
        INSERT INTO SG_CLIENTES  VALUES  (v_id_cliente, p_codigo , sysdate, p_empresa,
        p_nit,p_contacto ,p_telefono, p_dir, p_limite, v_consumo, v_saldo, p_id_usr, sysdate);
        
        v_res := '0';
        
    ELSE
        --editar
        UPDATE SG_CLIENTES SET EMPRESA = p_empresa,
                               NIT = p_nit,
                               CODIGO = p_codigo,
                               CONTACTO = p_contacto,
                               TELEFONO = p_telefono,
                               DIRECCION = p_dir,
                               LIMITE  = p_limite WHERE ID_CLIENTE = p_id_cliente;
    END IF;
END IF;
    if v_res = 0 THEN
        v_res := '1';
     COMMIT;
    ELSE
        ROLLBACK;       
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Clientes','P_SG_GUARDAR_CLIENTES','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_CLIENTE_CONSUMO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_CLIENTE_CONSUMO(
p_id_cliente SG_CLIENTES_CONSUMO.ID_CLIENTE%type,
p_codigo SG_CLIENTES_CONSUMO.CODIGO%type,
p_nombre SG_CLIENTES_CONSUMO.NOMBRE%type,
p_responsable SG_CLIENTES_CONSUMO.RESPONSABLE%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_id_cliente SG_CLIENTES_CONSUMO.ID_CLIENTE%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_id_cliente IS NULL OR p_codigo IS NULL OR p_nombre IS NULL OR p_responsable IS NULL
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   
   if p_id_cliente = 0 THEN
         --creacion
        v_id_cliente := Q_SG_CLIENTES_CONSUMO .nextval;
       
        INSERT INTO SG_CLIENTES_CONSUMO  ( ID_CLIENTE ,CODIGO ,NOMBRE ,RESPONSABLE ,CONSUMO ,CONSUMO_BS ,ID_USUARIO, FECHA_REG ) 
        VALUES  (v_id_cliente, p_codigo , p_nombre, p_responsable,   0, 0 , p_id_usr, sysdate);
        
        v_res := '0';
        
    ELSE
        UPDATE   SG_CLIENTES_CONSUMO SET CODIGO =  p_CODIGO , NOMBRE = p_NOMBRE , RESPONSABLE = p_RESPONSABLE  WHERE ID_CLIENTE =  p_ID_CLIENTE ;
        --editar
    END IF;
END IF;
    if v_res = 0 THEN
        v_res := '1';
     COMMIT;
    ELSE
        ROLLBACK;       
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Consumo','P_SG_GUARDAR_CLIENTE_CONSUMO','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_COMPRAS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_COMPRAS(
p_id_compra SG_COMPRAS.ID_COMPRA%type,
p_fecha SG_COMPRAS.FECHA%type,
p_id_combustible SG_COMPRAS.ID_COMBUSTIBLE%type,  
p_id_caja SG_COMPRAS.ID_CAJA%type,
p_cantidad SG_COMPRAS.CANTIDAD%type,
p_nro_factura SG_COMPRAS.NRO_FACTURA %type,
p_tipo SG_COMPRAS.TIPO%type,
p_precio SG_COMPRAS.PRECIO%type,
p_importe SG_COMPRAS.IMPORTE%type,
p_total SG_COMPRAS.TOTAL%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
  v_saldo NUMBER := 0;
  v_saldo_egreso NUMBER := 0;
 v_id_compra  SG_COMPRAS.ID_COMPRA%type;
 v_conbustible  SG_COMBUSTIBLES.NOMBRE%type;
 v_nro  SG_COMPRAS.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_fecha IS NULL OR p_id_combustible IS NULL OR p_id_caja IS NULL OR p_cantidad IS NULL 
    OR p_nro_factura IS NULL OR p_tipo IS NULL OR p_precio IS NULL OR p_importe IS NULL
     OR p_total IS NULL OR p_id_usr IS NULL  
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   if p_id_compra = 0 THEN
         --creacion
         IF v_res='0' THEN
                SELECT SALDO into v_saldo FROM SG_CAJAS  WHERE ID_CAJA = p_id_caja;
                IF v_saldo <p_total THEN
                    v_res := 'saldo insuficiente...';
                END IF;
            --verificamos saldo
            
        END IF; 
        IF v_res='0' THEN
            v_id_compra := Q_SG_COMPRAS.nextval;
            select MAx(NRO_COMP) INTO v_nro FROM SG_COMPRAS;
            
            IF v_nro IS NULL THEN
                v_nro:= 0;
            END IF;
            
            INSERT INTO SG_COMPRAS VALUES  (v_id_compra, v_nro + 1 , p_fecha, p_id_combustible,
             p_id_caja ,p_cantidad, p_nro_factura, p_tipo, p_precio, p_importe, 0,
             p_total, p_id_usr, sysdate );
            
            v_res := '0';
            IF v_res = '0' THEN
                 SELECT NOMBRE into v_conbustible FROM SG_COMBUSTIBLES WHERE ID_COMBUSTIBLE = p_id_combustible ;
                --vamos a insertar kardex efectivo
                INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
                 VALUES (Q_SG_KARDEX_EFECTIVO.nextval , p_id_caja , v_id_compra , 'COMPRA' ,p_fecha,'COMPRA  NRO: '||v_nro ||  'DE '||v_conbustible,0,p_total,0,p_id_usr,sysdate );
                
            END IF;
        END IF;
    ELSE
        IF v_res='0' THEN
                SELECT TOTAL  into v_saldo_egreso FROM SG_COMPRAS  WHERE ID_COMPRA  = p_id_compra; 
                SELECT SALDO into v_saldo FROM SG_CAJAS  WHERE ID_CAJA = p_id_caja;
                IF (v_saldo + v_saldo_egreso ) <p_total THEN
                    v_res := 'saldo insuficiente...';
                END IF;
            --verificamos saldo
            
        END IF; 
         IF v_res = '0' THEN
            UPDATE SG_COMPRAS SET TIPO = p_TIPO, PRECIO = p_PRECIO ,NRO_FACTURA = p_nro_factura ,CANTIDAD= p_CANTIDAD ,IMPORTE = p_IMPORTE ,TOTAL = p_TOTAL WHERE ID_COMPRA = p_id_compra ; 
            UPDATE SG_KARDEX_EFECTIVO SET
                                          EGRESO = p_TOTAL
            WHERE ID_OPERACION = p_id_compra AND OPERACION = 'COMPRA';
            v_id_compra := p_id_compra;
        END IF;
        --editar
    END IF;
END IF;
    if v_res = '0' THEN
       
     COMMIT;
        P_SG_ACT_KARDEX_EFECTIVO(p_id_caja,p_fecha,p_id_usr,v_res);
         v_res := v_id_compra;
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Compras','P_SG_GUARDAR_COMPRAS','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_DETALLE_COMPRA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_DETALLE_COMPRA(
p_id_detalle SG_DETALLES_COMPRAS.ID_DETALLE%type,
p_id_compra SG_DETALLES_COMPRAS.ID_COMPRA %type,
p_detalle SG_DETALLES_COMPRAS.DETALLE%type,
p_importe SG_DETALLES_COMPRAS.IMPORTE%type,
p_id_usr   NUMBER,
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_id_detalle  NUMBER := 0;
 v_precio_venta  NUMBER := 0;
 v_precio_compra  NUMBER := 0;
 v_id_combustible SG_POS.ID_COMBUSTIBLE%type; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
IF p_id_compra IS NULL OR p_detalle IS NULL OR p_importe IS NULL OR p_id_usr IS NULL 
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
       if p_id_detalle = 0 THEN
         --creacion
        v_id_detalle := Q_SG_DETALLES_COMPRAS .nextval;
        
        INSERT INTO SG_DETALLES_COMPRAS ( ID_DETALLE ,ID_COMPRA ,DETALLE ,PRECIO ,IMPORTE ,ID_USUARIO ,FECHA_REG )  
        VALUES  (v_id_detalle,p_id_compra,p_detalle,p_importe,p_importe,p_id_usr,sysdate);
        
    ELSE
        --editar
          UPDATE SG_DETALLES_COMPRAS   SET DETALLE =  p_DETALLE , IMPORTE = p_IMPORTE ,  PRECIO  = p_IMPORTE WHERE ID_DETALLE = p_id_detalle ;
    END IF;
    
    IF v_res = '0' THEN
          COMMIT;
          v_res := '1';
      ELSE
        ROLLBACK;
        END IF;
END IF;
p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo Compras','P_SG_GUARDAR_DETALLE_COMPRA','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_EGRESOS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_EGRESOS(
p_id_egreso SG_EGRESOS.ID_EGRESO%type,
p_fecha SG_EGRESOS.FECHA%type,
p_concepto  SG_EGRESOS.CONCEPTO%type,
p_id_caja SG_EGRESOS.ID_CAJA%type,
p_importe SG_EGRESOS.IMPORTE%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_saldo NUMBER := 0;
  v_saldo_egreso NUMBER := 0;
 v_id_egreso  SG_EGRESOS.ID_EGRESO%type;
 v_id_caja SG_EGRESOS.ID_CAJA%type;
 v_nro  SG_EGRESOS.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_fecha IS NULL OR p_concepto IS NULL OR p_id_caja IS NULL OR p_importe IS NULL OR p_id_usr IS NULL  
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   if p_id_egreso = 0 THEN
         --creacion
        IF v_res='0' THEN
                SELECT SALDO into v_saldo FROM SG_CAJAS  WHERE ID_CAJA = p_id_caja;
                IF v_saldo <p_importe THEN
                    v_res := 'saldo insuficiente...';
                END IF;
            --verificamos saldo
            
        END IF; 
        IF v_res='0' THEN
            
           
            v_id_egreso := Q_SG_EGRESOS.nextval;
            select MAx(NRO_COMP) INTO v_nro FROM SG_EGRESOS ;
           
            if v_nro is null then
                v_nro:= 1;
            else 
                 v_nro:= v_nro+ 1;
            end if;
            INSERT INTO SG_EGRESOS VALUES  (v_id_egreso, v_nro + 1 , p_fecha, 'OTROS EGRESOS',p_concepto ,p_id_caja ,p_importe ,p_id_usr, sysdate );
            
            v_res := '0';
             IF v_res = '0' THEN
               
                --vamos a insertar kardex efectivo
                INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
                 VALUES (Q_SG_KARDEX_EFECTIVO.nextval , p_id_caja , v_id_egreso , 'EGRESO' ,p_fecha,'EGRESO  NRO: '||v_nro ||  '- '||p_concepto,0,p_importe,0,p_id_usr,sysdate );
              
            END IF;
         END IF;
    ELSE
        IF v_res='0' THEN
                SELECT IMPORTE into v_saldo_egreso FROM SG_EGRESOS WHERE ID_EGRESO = p_id_egreso; 
                SELECT SALDO into v_saldo FROM SG_CAJAS  WHERE ID_CAJA = p_id_caja;
                IF (v_saldo + v_saldo_egreso ) <p_importe THEN
                    v_res := 'saldo insuficiente...';
                END IF;
            --verificamos saldo
            
        END IF; 
        --editar
        IF v_res = '0' THEN
        
            SELECT NRO_COMP, ID_CAJA INTO v_nro, v_id_caja FROM SG_EGRESOS WHERE ID_EGRESO = p_id_egreso;
            
            UPDATE SG_EGRESOS SET FECHA=p_fecha, 
                                   CONCEPTO = p_concepto, 
                                   ID_CAJA = p_id_caja, 
                                   IMPORTE = p_importe
            WHERE ID_EGRESO = p_id_egreso;
            
            
            UPDATE SG_KARDEX_EFECTIVO SET ID_CAJA =  p_id_caja,
                                          FECHA = p_fecha,
                                          DETALLE = 'EGRESO  NRO: '|| v_nro  ||  '- '||p_concepto,
                                          EGRESO = p_importe
           WHERE ID_OPERACION = p_id_egreso AND OPERACION = 'EGRESO';
           v_id_egreso:= p_id_egreso;
           
       END IF;                           
    END IF;
END IF;
    if v_res = '0' THEN
      --  v_res := '1';
     COMMIT;
      P_SG_ACT_KARDEX_EFECTIVO(p_id_caja,p_fecha,p_id_usr,v_res);
      IF p_id_caja <> v_id_caja THEN
        P_SG_ACT_KARDEX_EFECTIVO(v_id_caja,p_fecha,p_id_usr,v_res);
      END IF;
    v_res := TO_CHAR(v_id_egreso); 
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Egresos','P_SG_GUARDAR_EGRESOS','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_FACTURA_MN;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_FACTURA_MN(
p_id_factura SG_FACTURAS_MN.ID_FACTURA  %type,
p_id_combustible SG_FACTURAS_MN .ID_COMBUSTIBLE  %type,
p_fecha SG_FACTURAS_MN.FECHA %type,
p_importe SG_FACTURAS_MN.IMPORTE %type,
p_precio SG_FACTURAS_MN .PRECIO  %type,
p_litros SG_FACTURAS_MN .LITROS  %type,
p_id_usr   NUMBER,
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_id_factura  SG_FACTURAS_MN.ID_FACTURA%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
IF p_id_factura IS NULL OR p_id_combustible IS NULL OR p_fecha IS NULL OR p_importe IS NULL
THEN
    v_res := 'Faltan parametros.';
END IF;
--  SELECT count(*) INTO v_cnt FROM SG_VENTAS_DIARIAS WHERE FECHA =p_fecha;
--  IF v_cnt = 0 THEN 
--    v_res := 'No se Puede Crear la Factura sin antes crear los registros de ventas Diarias por Turno';
--  END IF;
  
IF v_res='0' THEN
     if p_id_factura = 0 THEN
        SELECT count(*) INTO v_cnt FROM SG_FACTURAS_MN  WHERE FECHA =p_fecha AND ID_COMBUSTIBLE = p_id_combustible ;
          IF v_cnt > 0 THEN 
            v_res := 'Solo puede Crear un Registro por Dia y Por Combustible';
          END IF;
        IF v_res='0' THEN
            v_id_factura := Q_SG_FACTURAS_MN.nextval;
           
            INSERT INTO SG_FACTURAS_MN  (ID_FACTURA ,ID_COMBUSTIBLE ,FECHA ,PRECIO ,LITROS ,IMPORTE ,ID_USUARIO ,FECHA_REG  ) VALUES(v_id_factura , p_id_combustible , p_fecha , p_precio , p_litros,p_importe ,p_id_usr , sysdate ) ;
        END IF;
     ELSE
        UPDATE SG_FACTURAS_MN SET IMPORTE = p_importe  , LITROS = p_litros WHERE ID_FACTURA = p_id_factura;
       v_id_factura := p_id_factura;
     END IF;
END IF;
if v_res = '0' THEN
        v_res := '1';
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Guardar Facturas','P_SG_GUARDAR_FACTURA_MN','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_INGRESOS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_INGRESOS(
p_id_ingreso SG_INGRESOS.ID_INGRESO%type,
p_fecha SG_INGRESOS.FECHA%type,
p_concepto  SG_INGRESOS.CONCEPTO%type,
p_id_caja SG_INGRESOS.ID_CAJA%type,
p_importe SG_INGRESOS.IMPORTE%type,
p_id_usr   NUMBER,
p_id_amortizacion  SG_INGRESOS.ID_AMORTIZACION%type,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_id_ingreso  SG_INGRESOS.ID_INGRESO%type;
 v_id_caja SG_INGRESOS.ID_CAJA%type;
 v_nro  SG_INGRESOS.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_fecha IS NULL OR p_concepto IS NULL OR p_id_caja IS NULL OR p_importe IS NULL OR p_id_usr IS NULL  
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   if p_id_ingreso = 0 THEN
         --creacion
        v_id_ingreso := Q_SG_INGRESOS.nextval;
        select MAx(NRO_COMP) INTO v_nro FROM SG_INGRESOS ;
       if v_nro is null then
            v_nro:= 1;
       ELSE 
                  v_nro:= v_nro +1;
        end if;
        INSERT INTO SG_INGRESOS VALUES  (v_id_ingreso, v_nro, p_fecha, 'OTROS INGRESOS',p_concepto ,p_id_caja ,p_importe ,p_id_usr, sysdate,p_id_amortizacion );
        
        v_res := '0';
         IF v_res = '0' THEN
            INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
             VALUES (Q_SG_KARDEX_EFECTIVO.nextval , p_id_caja , v_id_ingreso , 'INGRESO' ,p_fecha,'INGRESO  NRO: '||v_nro ||  '- '||p_concepto,p_importe,0,0,p_id_usr,sysdate  );
        END IF;
    ELSE
        --editar
        SELECT NRO_COMP, ID_CAJA INTO v_nro, v_id_caja FROM SG_INGRESOS WHERE ID_INGRESO = p_id_ingreso;
        
        UPDATE SG_INGRESOS SET FECHA=p_fecha, 
                               CONCEPTO = p_concepto, 
                               ID_CAJA = p_id_caja, 
                               IMPORTE = p_importe
        WHERE ID_INGRESO = p_id_ingreso;
        
         
        UPDATE SG_KARDEX_EFECTIVO SET ID_CAJA =  p_id_caja,
                                      FECHA = p_fecha,
                                      DETALLE = 'INGRESO  NRO: '|| v_nro ||  '- '||p_concepto,
                                      INGRESO = p_importe
       WHERE ID_OPERACION = p_id_ingreso AND OPERACION = 'INGRESO';
         v_id_ingreso:= p_id_ingreso;                              
    END IF;
END IF;
    if v_res = 0 THEN
       -- v_res := '1';
         P_SG_ACT_KARDEX_EFECTIVO(p_id_caja,p_fecha,p_id_usr,v_res);
         IF p_id_caja <> v_id_caja THEN
           P_SG_ACT_KARDEX_EFECTIVO(v_id_caja,p_fecha,p_id_usr,v_res); 
         END IF;
     COMMIT;
         v_res := TO_CHAR(v_id_ingreso); 
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Ingresos','P_SG_GUARDAR_INGRESOS','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_PERFIL;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_PERFIL(
 p_id_perfil IN SG_PERFILES.ID_PERFIL%TYPE,
 p_nombre  IN SG_PERFILES.NOMBRE%TYPE,
 p_descripcion  IN SG_PERFILES.DESCRIPCION%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id_perfil IS NULL OR p_nombre IS NULL  THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos que la LISTA no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_PERFILES   WHERE NOMBRE   = p_nombre  ;
    IF v_cnt > 0 THEN
      v_res := 'Ya existe ese perfil .';
    END IF;
  END IF;
  IF v_res='0' THEN
      -- Creamos la LISTA
      INSERT INTO SG_PERFILES  (ID_PERFIL  ,NOMBRE  ,DESCRIPCION  ,ESTADO )
      VALUES(q_SG_PERFILES.nextval, p_nombre, p_descripcion,  'A');

      COMMIT;
      
      v_res := '1';
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Menu Opciones','P_SG_GUARDAR_PERFIL','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_PERFIL_OPCION;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_PERFIL_OPCION(
 p_id_perfil IN SG_PERFILES_OPCIONES.ID_PERFIL%TYPE,
 p_id_opc  IN SG_PERFILES_OPCIONES.ID_OPC%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  -- Validamos nulos
  IF p_id_perfil IS NULL OR p_id_opc IS NULL  THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos que la LISTA no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_PERFILES_OPCIONES  WHERE ID_PERFIL  = p_id_perfil AND ID_OPC =p_id_opc ;
    IF v_cnt > 0 THEN
      v_res := 'Ya existe perfil asociado con una opcion.';
    END IF;
  END IF;
  IF v_res='0' THEN
      -- Creamos la LISTA
      INSERT INTO SG_PERFILES_OPCIONES (ID_PRF_OPC ,ID_PERFIL ,ID_OPC ,ESTADO )
      VALUES(q_SG_PERFILES_OPCIONES.nextval, p_id_perfil, p_id_opc,  'A');

      COMMIT;
      
      v_res := '1';
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Menu Opciones','P_SG_GUARDAR_PERFIL_OPCION','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_TRANFERENCIA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_TRANFERENCIA(
p_id_transferencia SG_TRANSFERENCIAS.ID_TRANSFERENCIA%type,
p_id_caja_origen SG_TRANSFERENCIAS.ID_CAJA_ORIGEN%type,
p_id_caja_destino SG_TRANSFERENCIAS.ID_CAJA_DESTINO%type,
p_fecha  SG_TRANSFERENCIAS.FECHA%type,
p_concepto SG_TRANSFERENCIAS.CONCEPTO%type,
p_importe_bs SG_TRANSFERENCIAS.IMPORTE_BS%type,
p_observacion  SG_TRANSFERENCIAS.OBSERVACION%type,
p_id_usr   NUMBER,

--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
  v_saldo NUMBER := 0;
   v_saldo_egreso NUMBER := 0;
 v_id_transferencia  SG_TRANSFERENCIAS.ID_TRANSFERENCIA%type;
 v_id_caja_origen SG_TRANSFERENCIAS.ID_CAJA_ORIGEN%type;
 v_id_caja_destino SG_TRANSFERENCIAS.ID_CAJA_DESTINO%type;
 v_nro  SG_TRANSFERENCIAS.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_fecha IS NULL OR p_id_caja_origen IS NULL OR p_id_caja_destino IS NULL OR p_importe_bs IS NULL OR p_id_usr IS NULL  
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   if p_id_transferencia = 0 THEN
         --creacion
        v_id_transferencia := Q_SG_TRANSFERENCIAS.nextval;
        select MAx(NRO_COMP) INTO v_nro FROM SG_TRANSFERENCIAS  ;
       if v_nro is null then
            v_nro:= 1;
       ELSE 
                  v_nro:= v_nro +1;
        end if;
        v_res := '0';
        SELECT SALDO into v_saldo FROM SG_CAJAS  WHERE ID_CAJA = p_id_caja_origen;
                IF v_saldo <p_importe_bs THEN
                    v_res := 'saldo insuficiente...';
                END IF;
        
         IF v_res = '0' THEN
             INSERT INTO SG_TRANSFERENCIAS  VALUES  (v_id_transferencia,p_id_caja_origen,p_id_caja_destino, v_nro, p_fecha,p_concepto, p_importe_bs,p_id_usr, sysdate,p_observacion );
            INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
             VALUES (Q_SG_KARDEX_EFECTIVO.nextval , p_id_caja_destino , v_id_transferencia , 'TRANSFERENCIA' ,p_fecha,'TRANSFERENCIA  NRO: '||v_nro ||  '- '||p_concepto,p_importe_bs,0,0,p_id_usr,sysdate  );
             
               INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
                 VALUES (Q_SG_KARDEX_EFECTIVO.nextval , p_id_caja_origen , v_id_transferencia , 'TRANSFERENCIA' ,p_fecha,'TRANSFERENCIA  NRO: '||v_nro ||  '- '||p_concepto,0,p_importe_bs,0,p_id_usr,sysdate );
        END IF;
    ELSE
        --editar
        -- SELECT IMPORTE into v_saldo_egreso FROM SG_TRANSFERENCIAS  WHERE ID_EGRESO = p_id_egreso; 
                
                
        SELECT NRO_COMP, ID_CAJA_ORIGEN, ID_CAJA_DESTINO,IMPORTE_BS   INTO v_nro,  v_id_caja_origen,v_id_caja_destino ,v_saldo_egreso FROM SG_TRANSFERENCIAS  WHERE ID_TRANSFERENCIA  = p_id_transferencia;
        SELECT SALDO into v_saldo FROM SG_CAJAS  WHERE ID_CAJA = p_id_caja_origen;
                IF (v_saldo + v_saldo_egreso ) <p_importe_bs THEN
                    v_res := 'saldo insuficiente...';
                END IF;
          IF v_res = '0' THEN
                    UPDATE SG_TRANSFERENCIAS  SET FECHA=p_fecha, 
                                           CONCEPTO = p_concepto, 
                                           IMPORTE_BS  = p_importe_bs
                    WHERE ID_TRANSFERENCIA  = p_id_transferencia;
                    
                     
                    UPDATE SG_KARDEX_EFECTIVO SET
                                                  FECHA = p_fecha,
                                                  DETALLE = 'TRANSFERENCIA  NRO: '|| v_nro ||  '- '||p_concepto,
                                                  INGRESO = p_importe_bs
                   WHERE ID_OPERACION = p_id_transferencia AND OPERACION = 'TRANSFERENCIA' AND EGRESO = 0 AND  ID_CAJA =  p_id_caja_destino;
                   
                   UPDATE SG_KARDEX_EFECTIVO SET
                                                      FECHA = p_fecha,
                                                      DETALLE = 'TRANSFERENCIA  NRO: '|| v_nro  ||  '- '||p_concepto,
                                                      EGRESO = p_importe_bs
                       WHERE ID_OPERACION = p_id_transferencia AND OPERACION = 'TRANSFERENCIA' AND INGRESO = 0 AND  ID_CAJA =  p_id_caja_origen; 
                     v_id_transferencia:= p_id_transferencia;     
           END IF;                         
    END IF;
END IF;
    if v_res = '0' THEN
       -- v_res := '1';
         P_SG_ACT_KARDEX_EFECTIVO(p_id_caja_origen,p_fecha,p_id_usr,v_res);
         P_SG_ACT_KARDEX_EFECTIVO(p_id_caja_destino,p_fecha,p_id_usr,v_res);
--         IF p_id_caja <> v_id_caja THEN
--           P_SG_ACT_KARDEX_EFECTIVO(v_id_caja,p_fecha,p_id_usr,v_res); 
--         END IF;
     COMMIT;
         v_res := TO_CHAR(v_id_transferencia); 
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Transferencia','P_SG_GUARDAR_TRANFERENCIA','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_USUARIO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_USUARIO(
p_id_usuario SG_USUARIOS.ID_USUARIO%type,
p_login SG_USUARIOS.LOGIN%type,
p_nombre SG_USUARIOS.NOMBRE%type,
p_email SG_USUARIOS.EMAIL%type,
p_id_perfil SG_USUARIOS.ID_PERFIL%type,
p_estado SG_USUARIOS.ESTADO%type,
p_contrasena SG_USUARIOS.CONTRASENA%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_id_usuario SG_USUARIOS.ID_USUARIO%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_id_usuario IS NULL OR p_login IS NULL OR p_nombre IS NULL OR p_estado IS NULL
OR p_contrasena IS NULL 
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
    
   if p_id_usuario = 0 THEN
         --creacion
        v_id_usuario := Q_SG_USUARIOS.nextval;
       
        SELECT count(*) into v_cnt FROM SG_USUARIOS WHERE LOGIN = p_LOGIN;
        IF v_cnt > 0 THEN
        
        v_res := 'ya existe el login : '||p_login||' Ingrese otro login...' ; 
       END IF;
        IF v_res = '0' THEN
             INSERT INTO SG_USUARIOS   VALUES  (v_id_usuario, p_login,p_nombre,p_email, sysdate,null, p_id_perfil,p_estado ,p_contrasena);
        
            v_res := '0';
        END IF;
       
        
    ELSE
          SELECT count(*) into v_cnt FROM SG_USUARIOS WHERE LOGIN = p_LOGIN AND ID_USUARIO <> p_id_usuario ;
            IF v_cnt > 0 THEN
            
                v_res := 'ya existe el login : '||p_login||' Ingrese otro login...' ; 
           END IF;
        --editar
         IF v_res = '0' THEN
            UPDATE SG_USUARIOS  SET LOGIN  = p_login,
                                   NOMBRE  = p_nombre,
                                   EMAIL  = p_email,
                                   ESTADO  = p_estado,
                                   CONTRASENA  = p_contrasena,
                                   ID_PERFIL  =  p_id_perfil
                                  WHERE ID_USUARIO   = p_id_usuario;
                                   v_res := '0';
        END IF;
    END IF;
END IF;
    if v_res = '0' THEN
        v_res := '1';
     COMMIT;
    ELSE
        ROLLBACK;       
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Clientes','P_SG_GUARDAR_USUARIO','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_VENTAS_DIARIAS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_VENTAS_DIARIAS(
 p_id_pos_turno IN SG_POS_TURNOS.ID_POS_TURNO%TYPE,
 p_id_pos IN SG_POS_TURNOS.ID_POS %TYPE,
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_turno IN SG_POS_TURNOS.TURNO%TYPE,
 p_SAL_LITTER  IN SG_POS_TURNOS.SAL_LITTER%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar pos_turnos
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_turno IS NULL OR p_id_usr IS NULL OR p_id_pos_turno IS NULL OR p_SAL_LITTER IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
       
         UPDATE SG_POS_TURNOS SET SAL_LITTER = p_SAL_LITTER , TOTAL = SAL_LITTER - ENT_LITTER   WHERE ID_POS_TURNO  = p_ID_POS_TURNO ;
          v_res := '0';
      END IF;

      IF v_res = '0' THEN
          COMMIT;
          v_res := '1';
      ELSE
        ROLLBACK;
        
        END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Guardar Ventas Diarias','P_SG_GUARDAR_VENTAS_DIARIAS','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_VENTA_MN_VACIO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_VENTA_MN_VACIO(
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar pos_DIA_MN
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_id_usr IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
              INSERT INTO SG_VENTAS_DIARIAS_MN (ID_VENTA ,FECHA, TOTAL ) VALUES (Q_SG_VENTAS_DIARIAS_MN.nextval , p_fecha , 0);
                commit;

            v_res := '1';        
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_DIA_MN','P_SG_GENERAR_POS_DIA_MN','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_OBTENER_PRECIO_ACT;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_OBTENER_PRECIO_ACT(
 p_tipo      IN SG_AJUSTE_PRECIO.TIPO %TYPE,
 p_id_combustible       IN SG_AJUSTE_PRECIO.ID_COMBUSTIBLE%TYPE,
 p_precio OUT NUMBER,
 p_res OUT VARCHAR
)
 /*
 Finalidad: Procedimiento para obtener la entrada de litter apàrtir de un pos  y turno y fecha
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_cnt2 NUMBER :=0;
 v_ent_litter_ini NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_precio NUMBER := 0;
 --v_ent_litter_ini VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_tipo IS NULL OR p_id_combustible IS NULL  THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
      SELECT COUNT(*) into v_cnt FROM SG_AJUSTE_PRECIO WHERE ID_COMBUSTIBLE = p_ID_COMBUSTIBLE AND ESTADO = 'A' AND TIPO = p_TIPO ;
      if v_cnt = 0 THEN
        v_res := 'No Existe Precio en Estado Actual';
      ELSE 
            SELECT PRECIO into v_precio FROM SG_AJUSTE_PRECIO WHERE ID_COMBUSTIBLE = p_ID_COMBUSTIBLE AND ESTADO = 'A' AND TIPO = p_TIPO ;
            p_precio := v_precio;
            v_res := '1';
      END IF;
      
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Obtener Precios Actual','P_SG_OBTENER_PRECIO_ACT','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_LITTER;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_LITTER(
 p_id_pos       IN SG_POS_TURNOS.ID_POS%TYPE,
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_turno IN SG_POS_TURNOS.TURNO%TYPE,
 p_ent_litter OUT  NUMBER,
 p_res OUT VARCHAR
)
 /*
 Finalidad: Procedimiento para obtener la entrada de litter apàrtir de un pos  y turno y fecha
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_cnt2 NUMBER :=0;
 v_ent_litter_ini NUMBER:=0;
 v_res VARCHAR2(100):='0';
 --v_ent_litter_ini VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_id_pos IS NULL OR p_fecha IS NULL OR p_turno IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
        SELECT COUNT(*) INTO v_cnt2 FROM SG_POS;
        SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS ;--WHERE FECHA <>p_FECHA AND TURNO <>p_TURNO  ;
        IF v_cnt < v_cnt2 THEN
            SELECT ENT_LITTER_INI into v_ent_litter_ini   FROM  SG_POS WHERE ID_POS  = p_id_pos ;
            p_ent_litter := v_ent_litter_ini;
            v_res := '0';
        ELSE
             IF p_turno = 'DIA' THEN
                 SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = 'NOCHE' AND FECHA =p_fecha -1 AND ID_POS = p_id_pos;
                    IF v_cnt = 0 THEN
                      v_res := 'No Existe Registros en el Turno NOCHE por favor Registre Primero Turno NOCHE fecha :'|| TO_DATE(p_fecha -1, 'DD/MM/YYYY') ;
                    ELSE
                         SELECT SAL_LITTER  INTO v_ent_litter_ini FROM SG_POS_TURNOS  WHERE TURNO  = 'NOCHE' AND FECHA = p_fecha -1 AND ID_POS = p_id_pos;
                         p_ent_litter := v_ent_litter_ini;
                         v_res := '0';
                    END IF;
            ELSIF p_turno = 'TARDE' THEN
                 SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = 'DIA' AND FECHA = p_fecha AND ID_POS = p_id_pos;
                    IF v_cnt = 0 THEN
                       v_res := 'No Existe Registros en el Turno DIA por favor Registre Primero Turno DIA fecha :'|| TO_DATE(p_fecha, 'DD/MM/YYYY') ;
                    ELSE
                         SELECT SAL_LITTER  INTO v_ent_litter_ini FROM SG_POS_TURNOS  WHERE TURNO  = 'DIA' AND FECHA = p_fecha AND ID_POS = p_id_pos;
                         p_ent_litter := v_ent_litter_ini;
                         v_res := '0';
                    END IF;
            ELSE
                SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = 'TARDE' AND FECHA = p_fecha AND ID_POS = p_id_pos;
                    IF v_cnt = 0 THEN
                       v_res := 'No Existe Registros en el Turno TARDE por favor Registre Primero Turno TARDE fecha :'|| TO_DATE(p_fecha, 'DD/MM/YYYY') ;
                    ELSE
                         SELECT SAL_LITTER  INTO v_ent_litter_ini FROM SG_POS_TURNOS  WHERE TURNO  = 'TARDE' AND FECHA = p_fecha AND ID_POS = p_id_pos;
                         p_ent_litter := v_ent_litter_ini;
                         v_res := '0';
                    END IF;
          END IF;
        
        END IF;
      
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_TURNOS','P_SG_OBTENER_ULTIMO_LITTER','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_LITTER_MN;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_LITTER_MN(
 p_id_pos       IN SG_POS_TURNOS.ID_POS%TYPE,
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_ent_litter OUT  NUMBER,
 p_res OUT VARCHAR
)
 /*
 Finalidad: Procedimiento para obtener la entrada de litter apàrtir de un pos  y turno y fecha
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_cnt2 NUMBER :=0;
 v_ent_litter_ini NUMBER:=0;
 v_res VARCHAR2(100):='0';
 --v_ent_litter_ini VARCHAR2(100):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_id_pos IS NULL OR p_fecha IS NULL  THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
        SELECT COUNT(*) INTO v_cnt2 FROM SG_POS;
        SELECT COUNT(*) INTO v_cnt FROM SG_POS_DIA_MN  ;--WHERE FECHA <>p_FECHA AND TURNO <>p_TURNO  ;
        IF v_cnt < v_cnt2 THEN
            SELECT ENT_LITTER_INI_MN  into v_ent_litter_ini   FROM  SG_POS WHERE ID_POS  = p_id_pos ;
            p_ent_litter := v_ent_litter_ini;
            v_res := '0';
        ELSE
                 SELECT COUNT(*) INTO v_cnt FROM SG_POS_DIA_MN   WHERE  FECHA =p_fecha -1 AND ID_POS = p_id_pos;
                    IF v_cnt = 0 THEN
                      v_res := 'No Existe Registros  fecha :'|| TO_DATE(p_fecha -1, 'DD/MM/YYYY') ;
                    ELSE
                         SELECT SAL_LITTER  INTO v_ent_litter_ini FROM SG_POS_DIA_MN   WHERE FECHA = p_fecha -1 AND ID_POS = p_id_pos;
                         p_ent_litter := v_ent_litter_ini;
                         v_res := '0';
                    END IF;
        END IF;
      
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_DIA_MN','P_SG_OBTENER_ULTIMO_LITTER_MN','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_SALDOS_MITTERS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_SALDOS_MITTERS(
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para verificar si se puiede editar
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje ("0")  No existe Modificacion y  "1"  Existe Modificacion
  Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
  v_fecha DATE ;
  v_turno VARCHAR2(100) := 'DIA';
  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
      select count(1) into v_cnt from SG_POS_TURNOS ;     
        IF v_cnt = 0 THEN
         v_res :='0';
        ELSE
            SELECT FECHA , TURNO INTO v_fecha , v_turno
            FROM(
                select FECHA , TURNO    , ROW_NUMBER() OVER( order by ID_POS_TURNO   desc ) AS ROWN2
                from SG_POS_TURNOS
                WHERE FECHA = (
                    SELECT FECHA FROM (
                    select FECHA , ROW_NUMBER() OVER( order by FECHA  desc )  as ROWN
                    from SG_POS_TURNOS
                    group by FECHA)
                WHERE  ROWN =1) 
            )
            WHERE ROWN2= 1  ;
            
            FOR x IN (SELECT * FROM SG_POS_TURNOS WHERE FECHA = v_fecha AND TURNO = v_turno) LOOP
                UPDATE SG_POS SET LITTER_ACT = x.SAL_LITTER WHERE ID_POS = x.ID_POS;
            
            END LOOP;
            COMMIT;
            v_res := '1';
        END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_TURNOS','P_SG_VERIFICAR_EDICION','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_VERIFICAR_EDICION;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_VERIFICAR_EDICION(
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_turno IN SG_POS_TURNOS.TURNO%TYPE,
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para verificar si se puiede editar
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje ("0")  No existe Modificacion y  "1"  Existe Modificacion
  Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_turno IS NULL  THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt > 0 THEN
      FOR   x in (SELECT * FROM  SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha) LOOP
        EXIT WHEN v_res = '1';
        IF x.ENT_LITTER  <> x.SAL_LITTER  THEN
            v_res :='1';
        END IF;
      
      END LOOP;
      IF v_res = '0'  THEN
        SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_DIARIAS   WHERE TURNO  = p_turno AND FECHA = p_fecha;
         IF v_cnt > 0 THEN
              v_res := '1';
         END IF;
      END IF;
    ELSE
        v_res := '0';
    END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_TURNOS','P_SG_VERIFICAR_EDICION','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_VERIFICAR_EDICION_MN;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_VERIFICAR_EDICION_MN(
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para verificar si se puiede editar
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje ("0")  No existe Modificacion y  "1"  Existe Modificacion
  Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL  THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_DIARIAS_MN    WHERE  FECHA = p_fecha;
    IF v_cnt > 0 THEN
       v_res := '1';
    ELSE
        v_res := '0';
    END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_DIA_MN','P_SG_VERIFICAR_EDICION_MN','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SP_ACTUALIZAR_CREDITO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SP_ACTUALIZAR_CREDITO(
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_turno IN SG_POS_TURNOS.TURNO%TYPE,
 p_id_usr   NUMBER,    
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar pos_turnos
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_id_venta SG_VENTAS_DIARIAS.ID_VENTA%type; 
 v_credito NUMBER :=0;
 v_total_venta NUMBER := 0;
 v_consumo  NUMBER :=0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_turno IS NULL  THEN
    v_res := 'Faltan parametrosww.';
  END IF;
   SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS    WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt > 0 THEN
         SELECT SUM(TOTAL_VENTA) INTO v_total_venta FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
    END IF;
    
    SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_CREDITO     WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt > 0 THEN
        SELECT SUM(IMPORTE_BS) INTO v_credito FROM  SG_VENTAS_CREDITO WHERE TURNO  = p_turno AND FECHA = p_fecha;
    END IF;
    
    SELECT COUNT(*) INTO v_cnt FROM SG_CONSUMOS WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt > 0 THEN
        SELECT SUM(IMPORTE_BS) INTO v_consumo FROM  SG_CONSUMOS WHERE TURNO  = p_turno AND FECHA = p_fecha;
    END IF;
    
  IF v_res='0' THEN
       
       SELECT ID_VENTA  INTO v_id_venta FROM SG_VENTAS_DIARIAS    WHERE TURNO  = p_turno AND FECHA = p_fecha;
       
      
       
       SELECT ID_VENTA into v_id_venta FROM SG_VENTAS_DIARIAS WHERE TURNO = p_TURNO AND FECHA = p_FECHA;
                    UPDATE SG_KARDEX_EFECTIVO SET ID_CAJA =  1,
                                      FECHA = p_fecha,
                                      INGRESO = v_total_venta - (v_credito + v_consumo)
                    WHERE ID_OPERACION = v_id_venta AND OPERACION = 'VENTA';
                    v_res := '0';
                    
  END IF;

      IF v_res = '0' THEN
          COMMIT;
          P_SG_ACT_KARDEX_EFECTIVO(1,p_fecha,p_id_usr,v_res);
          v_res := '1';
      ELSE
        ROLLBACK;
        
        END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Guardar Ventas Diarias','P_SP_ACTUALIZAR_CREDITO','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_AUX_REINICIAR_SECUENCIA;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_AUX_REINICIAR_SECUENCIA(
 p_nom_sec VARCHAR2, -- Nombre de la secuencia (debe incluir el ESQUEMA)
 p_res OUT VARCHAR2)
 IS
  v_errc sg_aux_log_errores.cod_error%type;
  v_errD sg_aux_log_errores.desc_error%type;
  v_id_log sg_aux_log_errores.id_log%type;
  v_sec NUMBER:=1;
  v_sql VARCHAR(100):='';
 BEGIN
   -- Obtenemos el siguiente valor de la secuencia (porque currval lo requiere)
   v_sql := 'SELECT ' || p_nom_sec || '.NEXTVAL FROM dual';   
   EXECUTE IMMEDIATE (v_sql) INTO v_sec;
   -- Obtenemos el valor de secuencia actual
   v_sql := 'SELECT ' || trim(p_nom_sec) || '.CURRVAL FROM dual';
   EXECUTE IMMEDIATE (v_sql) INTO v_sec;
   -- Actualizamos el Incremento con el valor actual, pero Negativo
   v_sql := 'ALTER SEQUENCE ' || p_nom_sec || ' INCREMENT BY -' || v_sec || ' MINVALUE 0'; 
   EXECUTE IMMEDIATE (v_sql);
   -- Obtenemos el Siguiente valor con incremento negativo, O sea, reiniciamos a 0 
   v_sql := 'SELECT ' || p_nom_sec || '.NEXTVAL FROM dual';   
   EXECUTE IMMEDIATE (v_sql) INTO v_sec;
   -- Reponemos el Incremento a UNO
   v_sql := 'ALTER SEQUENCE ' || p_nom_sec || ' INCREMENT BY 1 MINVALUE 0';
   EXECUTE IMMEDIATE (v_sql);
    
   p_res := '1';

 EXCEPTION 
   WHEN OTHERS THEN
      ROLLBACK;   
      v_errC:=substr(sqlcode,1,20);
      v_errD:=substr(sqlerrm,1,200);
      p_grabar_error_bd(v_errC,v_errD,'Procedimiento generico','P_REINICIAR_SECUENCIA','-'||p_nom_sec,0,v_id_log);
      p_res := 'Reset Secuencias  ->ERROR. LOG generado #' || v_id_log;
 END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACTUALIZAR_VENTAS_DIARIAS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACTUALIZAR_VENTAS_DIARIAS(
 p_fecha       IN SG_VENTAS_DIARIAS.FECHA%TYPE,
 p_turno IN SG_VENTAS_DIARIAS.TURNO%TYPE,
 p_responsable IN SG_VENTAS_DIARIAS.RESPONSABLE%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar venta diaria
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_total NUMBER:=0;
  v_total_venta NUMBER:=0;
  v_id_kardex  NUMBER:=0;
  v_ent_litter NUMBER:=0;
  v_id_venta  SG_VENTAS_DIARIAS.ID_VENTA%type;
  v_precio_venta  NUMBER := 0;
 v_precio_compra  NUMBER := 0;
 v_id_combustible SG_POS.ID_COMBUSTIBLE%type; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_turno IS NULL OR p_id_usr IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt = 0 THEN
      v_res := 'No Existe Registros POS_TURNOS Revise por favor';
    ELSE
          IF p_turno = 'DIA' THEN
                 SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_DIARIAS   WHERE TURNO  = 'TARDE' AND FECHA =p_fecha ;
                    IF v_cnt = 0 THEN
                      v_res := '1';
                    ELSE
                         FOR x IN (SELECT * FROM SG_POS_TURNOS WHERE  TURNO  = 'TARDE' AND FECHA =p_fecha) LOOP
                                SELECT ID_COMBUSTIBLE INTO v_id_combustible FROM SG_POS WHERE ID_POS = x.id_pos ;
                                CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('VENTA',v_id_combustible,v_precio_venta,v_res);
                                CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('COMPRA',v_id_combustible,v_precio_compra,v_res);
                                SELECT SAL_LITTER INTO v_ent_litter FROM SG_POS_TURNOS  WHERE  TURNO  = p_turno AND FECHA =p_fecha AND ID_POS = x.ID_POS   ; 
                                UPDATE SG_POS_TURNOS SET  ENT_LITTER  = v_ent_litter , TOTAL = SAL_LITTER   - v_ent_litter  , ID_USUARIO = p_id_usr , TOTAL_VENTA =  (SAL_LITTER  - v_ent_litter) * v_precio_venta ,TOTAL_COSTO =  (SAL_LITTER  - v_ent_litter) * v_precio_compra WHERE ID_POS_TURNO = x.ID_POS_TURNO ;
                         END LOOP;
                        P_SG_ACT_VENTAS_UPD(p_fecha,'TARDE',p_responsable,p_id_usr,v_res);
                         v_res := '1';
                    END IF;
            ELSIF p_turno = 'TARDE' THEN
                 SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_DIARIAS  WHERE TURNO  = 'NOCHE' AND FECHA =p_fecha ;
                    IF v_cnt = 0 THEN
                      v_res := '1';
                    ELSE
                         FOR x IN (SELECT * FROM SG_POS_TURNOS WHERE  TURNO  = 'NOCHE' AND FECHA =p_fecha) LOOP
                                SELECT ID_COMBUSTIBLE INTO v_id_combustible FROM SG_POS WHERE ID_POS = x.id_pos ;
                                CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('VENTA',v_id_combustible,v_precio_venta,v_res);
                                CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('COMPRA',v_id_combustible,v_precio_compra,v_res);
                                SELECT SAL_LITTER INTO v_ent_litter FROM SG_POS_TURNOS  WHERE  TURNO  = p_turno AND FECHA =p_fecha AND ID_POS = x.ID_POS   ; 
                                UPDATE SG_POS_TURNOS SET  ENT_LITTER  = v_ent_litter , TOTAL = SAL_LITTER   - v_ent_litter  , ID_USUARIO = p_id_usr , TOTAL_VENTA =  (SAL_LITTER  - v_ent_litter) * v_precio_venta ,TOTAL_COSTO =  (SAL_LITTER  - v_ent_litter) * v_precio_compra WHERE ID_POS_TURNO = x.ID_POS_TURNO ;
                         END LOOP;
                        P_SG_ACT_VENTAS_UPD(p_fecha,'NOCHE',p_responsable,p_id_usr,v_res);
                         v_res := '1';
                    END IF;
            ELSE
               SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_DIARIAS  WHERE TURNO  = 'DIA' AND FECHA =p_fecha + 1;
                    IF v_cnt = 0 THEN
                      v_res := '1';
                    ELSE
                         FOR x IN (SELECT * FROM SG_POS_TURNOS WHERE  TURNO  = 'DIA' AND FECHA =p_fecha + 1) LOOP
                                SELECT ID_COMBUSTIBLE INTO v_id_combustible FROM SG_POS WHERE ID_POS = x.id_pos ;
                                CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('VENTA',v_id_combustible,v_precio_venta,v_res);
                                CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('COMPRA',v_id_combustible,v_precio_compra,v_res);
                                SELECT SAL_LITTER INTO v_ent_litter FROM SG_POS_TURNOS  WHERE  TURNO  = p_turno AND FECHA =p_fecha AND ID_POS = x.ID_POS   ; 
                                UPDATE SG_POS_TURNOS SET  ENT_LITTER  = v_ent_litter , TOTAL = SAL_LITTER   - v_ent_litter  , ID_USUARIO = p_id_usr , TOTAL_VENTA =  (SAL_LITTER  - v_ent_litter) * v_precio_venta ,TOTAL_COSTO =  (SAL_LITTER  - v_ent_litter) * v_precio_compra WHERE ID_POS_TURNO = x.ID_POS_TURNO ;
                         END LOOP;
                        P_SG_ACT_VENTAS_UPD(p_fecha + 1,'DIA',p_responsable,p_id_usr,v_res);
                         v_res := '1';
                    END IF;
          END IF;
    END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Ventas Diarias','P_SG_ACTUALIZAR_VENTAS_DIARIAS','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ACT_CONSUMO_AJUSTE;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ACT_CONSUMO_AJUSTE(
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_consumo NUMBER:=0;
 v_consumo_bs NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
  v_id_ajuste  SG_AJUSTES_TANQUE.ID_AJUSTE%type;
BEGIN

  IF v_res='0' THEN
    
      FOR   x IN (SELECT *  FROM SG_CONSUMOS WHERE ID_CLIENTE = 8 ORDER BY FECHA   ) LOOP
      
              SELECT count(*) into v_cnt FROM SG_AJUSTES_TANQUE   WHERE FECHA = x.FECHA AND ID_TANQUE = x.ID_COMBUSTIBLE ;
               IF v_cnt = 0 THEN
                         P_SG_GUARDAR_AJUSTE_TANQUE(0 , x.ID_COMBUSTIBLE , x.FECHA ,'AJUSTE POR  CALIBRACION',x.IMPORTE_LTS  , 1,v_res);
               ELSE
                    SELECT ID_AJUSTE into v_id_ajuste  FROM SG_AJUSTES_TANQUE   WHERE FECHA = x.FECHA AND ID_TANQUE = x.ID_COMBUSTIBLE ;
                          UPDATE SG_AJUSTES_TANQUE SET CANTIDAD  =CANTIDAD +  x.IMPORTE_LTS  , OBSERVACION  = OBSERVACION || '  , AJSUTE POR CALIBRACION' WHERE ID_AJUSTE  = v_id_ajuste;
               
               END IF;
        
      END LOOP;
      
      v_res := '1';
      commit;
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Consumos','P_SG_ACT_CONSUMO','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CONSUMO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_CONSUMO(
 p_id_consumo CITYTRUCK.SG_CONSUMOS.ID_CONSUMO%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
 
 v_fecha SG_CONSUMOS.FECHA%type;
 v_turno SG_CONSUMOS.TURNO%type;
 
BEGIN

  -- Validamos nulos
  IF p_id_consumo IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  -- Verificamos que el Código de NIVEL DE TENSION DE SUBESTACION no exista 
  
  IF v_res='0' THEN
       SELECT   FECHA ,TURNO INTO  v_fecha , v_turno FROM SG_CONSUMOS  WHERE ID_CONSUMO   = p_id_consumo ;
      DELETE FROM  SG_CONSUMOS    where ID_CONSUMO   = p_ID_CONSUMO  ;
    
      -- Creamos el nodo en el arbol
      
      COMMIT;
      P_SP_ACTUALIZAR_CREDITO(v_fecha,v_turno,p_id_usr,v_res);
      v_res := '1';
  END IF;
    
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Consumos','P_SG_ELIMINAR_CONSUMO','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_ELIMINAR_VENTA_CREDITO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_ELIMINAR_VENTA_CREDITO(
 p_id_venta CITYTRUCK.SG_VENTAS_CREDITO.ID_VENTA%type,
 p_id_usr   NUMBER,
 p_res OUT  VARCHAR2
)

IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
  v_litros NUMBER := 0;
  
  
 v_nro  SG_VENTAS_CREDITO.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
 
 v_id_cliente  SG_VENTAS_CREDITO.ID_CLIENTE%type;
 v_fecha SG_VENTAS_CREDITO.FECHA%type;
 v_turno SG_VENTAS_CREDITO.TURNO%type;
BEGIN

  -- Validamos nulos
  IF p_id_venta IS NULL THEN
    v_res := 'Faltan parámetros.';
  END IF;
  -- Verificamos que el Código de NIVEL DE TENSION DE SUBESTACION no exista 
  
  IF v_res='0' THEN
  
      SELECT  ID_CLIENTE , FECHA ,TURNO, IMPORTE_LTS INTO v_id_cliente , v_fecha , v_turno,v_litros FROM SG_VENTAS_CREDITO WHERE ID_VENTA  = p_ID_VENTA ;
      DELETE FROM  SG_VENTAS_CREDITO   where ID_VENTA  = p_ID_VENTA ;
      DELETE FROM SG_KARDEX_CLIENTE WHERE ID_OPERACION = p_ID_VENTA AND OPERACION  = 'VENTA CREDITO';
       UPDATE SG_CLIENTES    SET CONSUMO = CONSUMO -v_litros  WHERE ID_CLIENTE  = v_id_cliente ;
      
      v_res := '0';
  END IF;
     if v_res = '0' THEN
        v_res := '1';
         P_SG_ACT_KARDEX_CLIENTE(v_id_cliente,v_fecha -1,p_id_usr,v_res);
        COMMIT;
        P_SP_ACTUALIZAR_CREDITO(v_fecha,v_turno,p_id_usr,v_res);

    ELSE
        ROLLBACK;
        
    END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Modulo Venta Credito','P_SG_ELIMINAR_VENTA_CREDITO','-','-',v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GENERAR_POS_DIA_MN;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GENERAR_POS_DIA_MN(
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar pos_DIA_MN
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_id_usr IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_DIA_MN   WHERE FECHA = p_fecha;
    IF v_cnt > 0 THEN
      v_res := 'Ya existe registros en la tabla POS_DIA';
    END IF;
  END IF;
   IF v_cnt = 0 THEN
            FOR y IN (SELECT * FROM  SG_POS   ) LOOP
                    EXIT WHEN v_res <> '0';
                    P_SG_OBTENER_ULTIMO_LITTER_MN(y.ID_POS,p_fecha,v_ent_litter_ini,v_res);
                    if v_res = '0' THEN
                        INSERT INTO SG_POS_DIA_MN  (ID_POS_DIA_MN   ,ID_POS    ,FECHA  ,ENT_LITTER  ,SAL_LITTER  ,TOTAL ,TOTAL_VENTA ,TOTAL_COSTO ,ID_USUARIO ,FECHA_REG    ) 
                            VALUES(Q_SG_POS_DIA_MN.nextval, y.ID_POS  , p_fecha , v_ent_litter_ini  , v_ent_litter_ini , 0 ,0,0,p_id_usr , sysdate );
                            
                    END IF;
            END LOOP;
            IF v_res = '0' THEN
                  COMMIT;
                  v_res := '1';
              ELSE
                ROLLBACK;
                END IF;
    ELSE      
            v_res := '0';        
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_DIA_MN','P_SG_GENERAR_POS_DIA_MN','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GENERAR_POS_TURNOS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GENERAR_POS_TURNOS(
 p_fecha       IN SG_POS_TURNOS.FECHA%TYPE,
 p_turno IN SG_POS_TURNOS.TURNO%TYPE,
 p_eliminar  IN NUMBER, --0 no eliminara si es uno elimianra todos los registros existentes
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar pos_turnos
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_turno IS NULL OR p_id_usr IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt > 0 THEN
        IF p_eliminar = 1 THEN
                DELETE FROM SG_POS_TURNOS WHERE TURNO  = p_turno AND FECHA = p_fecha;
                COMMIT;
                v_res := '0';
                v_cnt := 0;
        ELSE
          v_res := 'Ya existe registros en la tabla POS_TURNOs';
        END IF;
      
    END IF;
  END IF;
   IF v_cnt = 0 THEN
            FOR y IN (SELECT * FROM  SG_POS   ) LOOP
                    EXIT WHEN v_res <> '0';
                    P_SG_OBTENER_ULTIMO_LITTER(y.ID_POS,p_fecha,p_turno,v_ent_litter_ini,v_res);
                    if v_res = '0' THEN
                        INSERT INTO SG_POS_TURNOS (ID_POS_TURNO  ,ID_POS   ,TURNO  ,FECHA  ,ENT_LITTER  ,SAL_LITTER  ,TOTAL ,TOTAL_VENTA ,TOTAL_COSTO ,ID_USUARIO ,FECHA_REG    ) 
                            VALUES(Q_SG_POS_TURNOS.nextval, y.ID_POS , p_turno , p_fecha , v_ent_litter_ini  , v_ent_litter_ini , 0 ,0,0,p_id_usr , sysdate );
                            
                    END IF;
            END LOOP;
            IF v_res = '0' THEN
                  COMMIT;
                  v_res := '1';
              ELSE
                ROLLBACK;
                END IF;
    ELSE      
            v_res := '0';        
   END IF;  
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_TURNOS','P_SG_GENERAR_POS_TURNOS','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GENERAR_VENTAS_DIARIAS;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GENERAR_VENTAS_DIARIAS(
 p_fecha       IN SG_VENTAS_DIARIAS.FECHA%TYPE,
 p_turno IN SG_VENTAS_DIARIAS.TURNO%TYPE,
 p_responsable IN SG_VENTAS_DIARIAS.RESPONSABLE%TYPE,
 p_id_usr   NUMBER,    -- ID del usuario que realiza la operacion
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para generar venta diaria
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje de OK ("1") o Descripcion del error
 Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_total NUMBER:=0;
  v_total_venta NUMBER:=0;
  v_id_kardex  NUMBER:=0;
  v_id_venta  SG_VENTAS_DIARIAS.ID_VENTA%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
  -- Validamos nulos
  IF p_fecha IS NULL OR p_turno IS NULL OR p_id_usr IS NULL THEN
    v_res := 'Faltan parametros.';
  END IF;
  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
    IF v_cnt = 0 THEN
      v_res := 'No Existe Registros POS_TURNOS Revise por favor';
    ELSE
         SELECT SUM(TOTAL ) INTO v_total FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
         SELECT SUM(TOTAL_VENTA) INTO v_total_venta FROM SG_POS_TURNOS  WHERE TURNO  = p_turno AND FECHA = p_fecha;
         SELECT COUNT(*) INTO v_cnt FROM SG_VENTAS_DIARIAS WHERE TURNO = p_TURNO AND FECHA = p_FECHA;
         IF v_cnt > 0 THEN
                    SELECT ID_VENTA into v_id_venta FROM SG_VENTAS_DIARIAS WHERE TURNO = p_TURNO AND FECHA = p_FECHA;
                    UPDATE SG_VENTAS_DIARIAS SET TOTAL = v_total ,RESPONSABLE = p_RESPONSABLE WHERE TURNO = p_TURNO AND FECHA = p_FECHA;
                    UPDATE SG_KARDEX_EFECTIVO SET ID_CAJA =  1,
                                      FECHA = p_fecha,
                                      INGRESO = v_total_venta
                    WHERE ID_OPERACION = v_id_venta AND OPERACION = 'VENTA';
                    P_SG_ACTUALIZAR_VENTAS_DIARIAS(p_fecha,p_turno,p_responsable,p_id_usr,v_res);
                    v_res := '0';
         ELSE
                    SELECT Q_SG_VENTAS_DIARIAS.nextval INTO v_id_venta FROM DUAL;
                    INSERT INTO SG_VENTAS_DIARIAS  (ID_VENTA ,TURNO, RESPONSABLE ,FECHA ,TOTAL ) VALUES
                    (v_id_venta ,p_TURNO, p_RESPONSABLE ,p_FECHA ,v_TOTAL);
                     INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
                     VALUES (Q_SG_KARDEX_EFECTIVO.nextval , 1 , v_id_venta , 'VENTA' ,p_fecha,'VENTA  FECHA : '||TO_CHAR(p_fecha , 'DD/MM/YYYY') ||  '- TURNO :'||p_turno,v_total_venta,0,0,p_id_usr,sysdate );
                     v_res := '0';
         END IF; 
            IF v_res = '0' THEN
                  COMMIT;
                    P_SG_ACT_KARDEX_EFECTIVO(1,p_fecha,p_id_usr,v_res);
                  v_res := '1';
                    P_SP_ACTUALIZAR_CREDITO(p_FECHA,p_TURNO,p_id_usr,v_res);
              ELSE
                ROLLBACK;
                END IF;
    END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_TURNOS','P_SG_GENERAR_POS_TURNOS','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_AMORTIZACION;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_AMORTIZACION(
p_id_a SG_AMORTIZACIONES.ID_AMORTIZACION%type,
p_id_cliente  SG_AMORTIZACIONES.ID_CLIENTE%type,
p_id_caja SG_AMORTIZACIONES.ID_CAJA%type,
p_fecha SG_AMORTIZACIONES.FECHA%type,
p_concepto SG_AMORTIZACIONES.CONCEPTO%type,
p_importe SG_AMORTIZACIONES.IMPORTE_BS%type,
p_observacion  SG_AMORTIZACIONES.OBSERVACION%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_fecha SG_KARDEX_CLIENTE.FECHA%type;
 v_id_a SG_AMORTIZACIONES.ID_AMORTIZACION%type;   
 v_nro  SG_AMORTIZACIONES.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

IF p_id_a IS NULL OR p_id_cliente IS NULL OR p_id_caja IS NULL OR p_fecha IS NULL OR p_concepto IS NULL
OR p_importe IS NULL OR  p_id_usr IS NULL 
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
--vamos a crear nuestra secuencia
   if p_id_a = 0 THEN
         --creacion
         select TO_DATE(TO_CHAR(p_fecha, 'MM/DD/YYYY') , 'MM/DD/YYYY')  into v_fecha from dual;
        v_id_a := Q_SG_AMORTIZACIONES.nextval;
        select MAx(NRO_COMP) INTO v_nro FROM SG_AMORTIZACIONES;
       
        if v_nro is null then
            v_nro:= 0;
        end if;
        INSERT INTO SG_AMORTIZACIONES  VALUES  (v_id_a, p_id_cliente, p_id_caja, v_nro + 1 , p_fecha, p_concepto,
        p_importe ,p_id_usr, sysdate,p_observacion);
        
        v_res := '0';
         IF v_res = '0' THEN
             
            INSERT INTO SG_KARDEX_CLIENTE ( ID_KARDEX, ID_CLIENTE, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, CONSUMO , AMORTIZACION  ,SALDO, ID_USUARIO ,FECHA_REG )
             VALUES (Q_SG_KARDEX_CLIENTE.nextval , p_id_cliente , v_id_a , 'AMORTIZACION' ,v_fecha ,'AMORTIZACION - obs: ' ||p_observacion,0, p_importe,0,p_id_usr,sysdate );
            P_SG_GUARDAR_INGRESOS(0, v_fecha, p_concepto, p_id_caja, p_importe, p_id_usr,v_id_a, v_res);
            v_res := '1';
 
        END IF;
    --ELSE
        --editar
    END IF;
END IF;
    if v_res = '1' THEN
     COMMIT;
      P_SG_ACT_KARDEX_CLIENTE(p_id_cliente, v_fecha ,p_id_usr,v_res);
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Cuentas Por Cobrar','P_SG_GUARDAR_AMORTIZACION','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_CONSUMO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_CONSUMO(
p_id_consumo SG_CONSUMOS.ID_CONSUMO%type,
p_id_cliente SG_CONSUMOS.ID_CLIENTE%type,
p_id_combustible SG_CONSUMOS.ID_COMBUSTIBLE%type,
p_id_pos SG_CONSUMOS.ID_POS%type,
p_tipo SG_CONSUMOS.TIPO%type,
p_fecha SG_CONSUMOS.FECHA%type,
p_turno  SG_CONSUMOS.TURNO%type,
p_responsable SG_CONSUMOS.RESPONSABLE%type,
p_precio SG_CONSUMOS.PRECIO%type,
p_importe_bs SG_CONSUMOS.IMPORTE_BS%type,
p_importe_lts SG_CONSUMOS.IMPORTE_LTS%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_ajuste NUMBER:=0;
 v_res VARCHAR2(1000):='0';
 v_id_consumo  SG_CONSUMOS.ID_CONSUMO%type;
 v_id_ajuste  SG_AJUSTES_TANQUE.ID_AJUSTE%type;
 v_nro  SG_CONSUMOS.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
IF p_id_consumo = 0 THEN
    IF p_fecha IS NULL OR p_id_cliente IS NULL OR p_id_combustible IS NULL OR p_turno IS NULL OR p_responsable IS NULL  
    THEN
        v_res := 'Faltan parametros.';
    END IF;
    IF v_res='0' THEN
    --vamos a crear nuestra secuencia
       if p_id_consumo = 0 THEN
             --creacion
            v_id_consumo := Q_SG_CONSUMOS .nextval;
            select MAx(NRO_COMP) INTO v_nro FROM SG_CONSUMOS   ;
           if v_nro is null then
                v_nro:= 0;
            end if;
            INSERT INTO SG_CONSUMOS  (ID_CONSUMO , ID_COMBUSTIBLE ,ID_CLIENTE ,NRO_COMP,FECHA ,TURNO ,PRECIO ,IMPORTE_BS, IMPORTE_LTS ,RESPONSABLE, ID_USUARIO ,FECHA_REG , ID_POS , TIPO  )
            VALUES  (v_id_consumo,  p_ID_COMBUSTIBLE , p_ID_CLIENTE , v_nro + 1, p_FECHA ,  p_TURNO ,  p_precio  , p_importe_lts *     p_precio ,p_importe_lts ,p_responsable, p_id_usr ,sysdate , p_id_pos , p_tipo );
           
           
           IF p_ID_CLIENTE = 8 THEN
               SELECT count(*) into v_cnt FROM SG_AJUSTES_TANQUE   WHERE FECHA = p_FECHA AND ID_TANQUE = p_ID_COMBUSTIBLE ;
               IF v_cnt = 0 THEN
                         P_SG_GUARDAR_AJUSTE_TANQUE(0,p_ID_COMBUSTIBLE , p_FECHA ,'AJUSTE POR  CALIBRACION',p_importe_lts , p_id_usr,v_res);
               ELSE
                    SELECT ID_AJUSTE into v_id_ajuste  FROM SG_AJUSTES_TANQUE   WHERE FECHA = p_FECHA AND ID_TANQUE = p_ID_COMBUSTIBLE ;
                          UPDATE SG_AJUSTES_TANQUE SET CANTIDAD  =CANTIDAD +  p_importe_lts  , OBSERVACION  = OBSERVACION || '  , AJSUTE POR CALIBRACION' WHERE ID_AJUSTE  = v_id_ajuste;
               
               END IF
               ;
               --UPDATE SG_AJUSTE_POS SET AJUSTE = -  ROUND ( p_importe_lts , 0) WHERE ID_POS  = p_id_pos AND FECHA = p_fecha  ;
               v_res := '0';
           END IF;
           --ROUND ( n, integer)
    --        v_res := '0';
    --         IF v_res = '0' THEN
    --            INSERT INTO SG_KARDEX_EFECTIVO ( ID_KARDEX, ID_CAJA, ID_OPERACION ,OPERACION ,FECHA ,DETALLE, INGRESO, EGRESO ,SALDO, ID_USUARIO ,FECHA_REG )
    --             VALUES (Q_SG_KARDEX_EFECTIVO.nextval , p_id_caja , v_id_ingreso , 'INGRESO' ,p_fecha,'INGRESO  NRO: '||v_nro ||  '- '||p_concepto,p_importe,0,0,p_id_usr,sysdate );
    --        END IF;
        --ELSE
            --editar
        END IF;
    END IF;
ELSE 
    IF p_importe_lts IS NULL  
    THEN
        v_res := 'Faltan parametros.';
    END IF;
    IF v_res='0' THEN
        SELECT IMPORTE_LTS INTO v_ajuste FROM SG_CONSUMOS  WHERE ID_CONSUMO  =p_ID_CONSUMO  ;
        UPDATE SG_CONSUMOS  SET IMPORTE_LTS = p_IMPORTE_LTS , IMPORTE_BS = p_IMPORTE_BS WHERE ID_CONSUMO  =p_ID_CONSUMO  ;
        UPDATE SG_AJUSTE_POS SET AJUSTE = (AJUSTE - v_ajuste )+ ROUND ( -p_importe_lts , 0) WHERE ID_POS  = p_id_pos AND FECHA = p_fecha  ;
     END IF;
END IF;
    if v_res = '0' THEN
        v_res := '1';
        -- P_SG_ACT_KARDEX_EFECTIVO(p_id_caja,p_fecha,p_id_usr,v_res);
     COMMIT;
        P_SP_ACTUALIZAR_CREDITO(p_fecha,p_turno,p_id_usr,v_res);
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Consumos','P_SG_GUARDAR_CONSUMO','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_POS_DIA_MN;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_POS_DIA_MN(
p_id_pos_turno SG_POS_DIA_MN.ID_POS_DIA_MN %type,
p_id_pos SG_POS_DIA_MN.ID_POS %type,
p_fecha SG_POS_DIA_MN.FECHA %type,
p_ent_litter SG_POS_DIA_MN.ENT_LITTER %type,
p_sal_litter SG_POS_DIA_MN.SAL_LITTER %type,
p_total SG_POS_DIA_MN.TOTAL %type,
p_id_usr   NUMBER,
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_precio_venta  NUMBER := 0;
 v_precio_compra  NUMBER := 0;
 v_id_combustible SG_POS.ID_COMBUSTIBLE%type; 
 v_id SG_POS_DIA_MN.ID_POS_DIA_MN%type; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
IF p_id_pos_turno IS NULL OR p_id_pos IS NULL OR p_fecha IS NULL OR p_ent_litter IS NULL OR p_sal_litter IS NULL OR p_total IS NULL OR p_id_usr IS NULL 
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_DIA_MN   WHERE ID_POS_DIA_MN   = p_id_pos_turno;
    IF v_cnt = 0 THEN
         v_res := 'No existe ese Registro Informar a Administrador de Sistemas';
    ELSE
        SELECT ID_COMBUSTIBLE INTO v_id_combustible FROM SG_POS WHERE ID_POS = p_id_pos ;
        CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('VENTA',v_id_combustible,v_precio_venta,v_res);
        CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('COMPRA',v_id_combustible,v_precio_compra,v_res);
        UPDATE SG_POS_DIA_MN  SET SAL_LITTER = p_sal_litter , TOTAL = p_sal_litter  - ENT_LITTER  , ID_USUARIO = p_id_usr , FECHA_REG = sysdate, TOTAL_VENTA =  (p_sal_litter  - ENT_LITTER) * v_precio_venta ,TOTAL_COSTO =  (p_sal_litter  - ENT_LITTER) * v_precio_compra WHERE ID_POS_DIA_MN  = p_ID_POS_TURNO ;
       
            SELECT count(1) INTO v_cnt FROM  SG_POS_DIA_MN   
            WHERE FECHA   =p_fecha +1 ;
            IF v_cnt > 0 THEN
                SELECT ID_POS_DIA_MN INTO v_id FROM SG_POS_DIA_MN WHERE FECHA = p_fecha +1 AND ID_POS = p_id_pos ;
                UPDATE SG_POS_DIA_MN SET ENT_LITTER = p_sal_litter, TOTAL =SAL_LITTER - p_sal_litter   ,  FECHA_REG = sysdate ,TOTAL_VENTA =  (SAL_LITTER - p_sal_litter) * v_precio_venta ,TOTAL_COSTO =  (SAL_LITTER - p_sal_litter) * v_precio_compra WHERE ID_POS_DIA_MN  = v_id ;
                 v_res := '0';
            ELSE 
                 v_res := '0';
            END IF;
    END IF;
    IF v_res = '0' THEN
          COMMIT;
          v_res := '1';
          SELECT count(*) INTO v_cnt FROM SG_VENTAS_DIARIAS_MN WHERE FECHA = p_fecha;
          IF v_cnt =  0 THEN
                INSERT INTO SG_VENTAS_DIARIAS_MN (ID_VENTA ,FECHA, TOTAL ) VALUES (Q_SG_VENTAS_DIARIAS_MN.nextval , p_fecha , 0);
                commit;
          END IF;
      ELSE
        ROLLBACK;
        END IF;
END IF;
p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Guardar POS_DIA_MN','P_SG_GUARDAR_POS_DIA_MN','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_POS_TURNO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_POS_TURNO(
p_id_pos_turno SG_POS_TURNOS.ID_POS_TURNO%type,
p_id_pos SG_POS_TURNOS.ID_POS %type,
p_turno SG_POS_TURNOS.TURNO %type,
p_fecha SG_POS_TURNOS.FECHA %type,
p_ent_litter SG_POS_TURNOS.ENT_LITTER %type,
p_sal_litter SG_POS_TURNOS.SAL_LITTER %type,
p_total SG_POS_TURNOS.TOTAL %type,
p_id_usr   NUMBER,
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
 v_precio_venta  NUMBER := 0;
 v_precio_compra  NUMBER := 0;
 v_id_combustible SG_POS.ID_COMBUSTIBLE%type; 
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
IF p_id_pos_turno IS NULL OR p_id_pos IS NULL OR p_turno IS NULL OR p_fecha IS NULL OR p_ent_litter IS NULL OR p_sal_litter IS NULL OR p_total IS NULL OR p_id_usr IS NULL 
THEN
    v_res := 'Faltan parametros.';
END IF;
IF v_res='0' THEN
    SELECT COUNT(*) INTO v_cnt FROM SG_POS_TURNOS  WHERE ID_POS_TURNO  = p_id_pos_turno;
    IF v_cnt = 0 THEN
         v_res := 'No existe ese Registro Informar a Administrador de Sistemas';
    ELSE
        SELECT ID_COMBUSTIBLE INTO v_id_combustible FROM SG_POS WHERE ID_POS = p_id_pos ;
        CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('VENTA',v_id_combustible,v_precio_venta,v_res);
        CITYTRUCK.P_SG_OBTENER_PRECIO_ACT('COMPRA',v_id_combustible,v_precio_compra,v_res);
        UPDATE SG_POS_TURNOS SET SAL_LITTER = p_sal_litter , TOTAL = p_sal_litter  - ENT_LITTER  , ID_USUARIO = p_id_usr , FECHA_REG = sysdate, TOTAL_VENTA =  (p_sal_litter  - ENT_LITTER) * v_precio_venta ,TOTAL_COSTO =  (p_sal_litter  - ENT_LITTER) * v_precio_compra WHERE ID_POS_TURNO = p_ID_POS_TURNO ;
        v_res := '0';
    END IF;
    IF v_res = '0' THEN
          COMMIT;
          v_res := '1';
      ELSE
        ROLLBACK;
        END IF;
END IF;
p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Guardar pos Turno','P_ESG_GUARDAR_POS_TURNO','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_GUARDAR_VENTA_CREDITO;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_GUARDAR_VENTA_CREDITO(
p_id_venta SG_VENTAS_CREDITO.ID_VENTA%type,
p_id_cliente SG_VENTAS_CREDITO.ID_CLIENTE%type,
p_id_combustible SG_VENTAS_CREDITO.ID_COMBUSTIBLE%type,
p_fecha SG_VENTAS_CREDITO.FECHA%type,
p_turno  SG_VENTAS_CREDITO.TURNO%type,
p_responsable SG_VENTAS_CREDITO.RESPONSABLE%type,
p_precio SG_VENTAS_CREDITO.PRECIO%type,
p_importe_bs SG_VENTAS_CREDITO.IMPORTE_BS%type,
p_importe_lts SG_VENTAS_CREDITO.IMPORTE_LTS%type,
p_id_usr   NUMBER,
--el resultado si es ok toda la operacion '1' y si no te devolvera el mensaje del error
p_res OUT VARCHAR2
)
IS
 v_cnt NUMBER:=0;
 v_litros NUMBER := 0;
 v_saldo NUMBER :=0;
 v_limite NUMBER :=0;
 v_total NUMBER :=0;
 v_res VARCHAR2(1000):='0';
 v_combustible VARCHAR2(1000):='0';
 
 v_id_venta  SG_VENTAS_CREDITO.ID_VENTA%type;
  v_id_cliente  SG_VENTAS_CREDITO.ID_CLIENTE %type;
  v_turno  SG_VENTAS_CREDITO.TURNO %type;
  v_fecha  SG_VENTAS_CREDITO.FECHA  %type;
 v_nro  SG_VENTAS_CREDITO.NRO_COMP%type;
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN
SELECT NOMBRE into v_combustible FROM SG_COMBUSTIBLES WHERE ID_COMBUSTIBLE  = p_ID_COMBUSTIBLE ;
IF p_id_venta = 0 THEN
    IF p_fecha IS NULL OR p_id_cliente IS NULL OR p_id_combustible IS NULL OR p_turno IS NULL OR p_responsable IS NULL  
    THEN
        v_res := 'Faltan parametros 2.';
    END IF;
    IF v_res='0' THEN
    --Validamos su credito 
        select SALDO , LIMITE INTO v_saldo , v_limite  FROM SG_CLIENTES  WHERE ID_CLIENTE  = p_id_cliente;
        v_total := v_saldo +(p_importe_lts *     p_precio) ;
        IF v_total > v_limite THEN
            v_res := 'No puede exceder el limite te prestamo . Limite de prestamo permitido :'||v_limite||' Total consumo : '||v_total;
        END IF;
     END IF;
     
     IF v_res = '0'THEN
    
        
       if p_id_venta = 0 THEN
             --creacion
            v_id_venta := Q_SG_VENTAS_CREDITO .nextval;
            select MAx(NRO_COMP) INTO v_nro FROM SG_VENTAS_CREDITO  ;
           if v_nro is null then
                v_nro:= 0;
            end if;
                INSERT INTO SG_VENTAS_CREDITO (ID_VENTA, ID_COMBUSTIBLE ,ID_CLIENTE ,NRO_COMP,FECHA ,TURNO ,PRECIO ,IMPORTE_BS, IMPORTE_LTS ,RESPONSABLE, ID_USUARIO ,FECHA_REG )
                VALUES  (v_id_venta,  p_ID_COMBUSTIBLE , p_ID_CLIENTE , v_nro + 1, p_FECHA ,  p_TURNO ,  p_precio  , p_importe_lts *     p_precio ,p_importe_lts ,p_responsable, p_id_usr ,sysdate );
                 UPDATE SG_CLIENTES    SET CONSUMO = CONSUMO + p_importe_lts  WHERE ID_CLIENTE  = p_ID_CLIENTE ;
            v_res := '0';
             IF v_res = '0' THEN
              
                INSERT INTO SG_KARDEX_CLIENTE  ( ID_KARDEX, ID_CLIENTE , ID_OPERACION ,OPERACION ,FECHA ,DETALLE, CONSUMO , AMORTIZACION  ,SALDO, ID_USUARIO ,FECHA_REG )
                 VALUES (Q_SG_KARDEX_CLIENTE.nextval , p_ID_CLIENTE , v_id_venta , 'VENTA CREDITO' ,p_fecha,'CONSUMO : '||v_combustible ||  '- '||p_turno, p_importe_lts *     p_precio,0,0,p_id_usr,sysdate );
                 v_turno := p_turno;
                 v_fecha := p_fecha;
            END IF;
        --ELSE
            --editar
        END IF;
    END IF;
ELSE 
    IF p_importe_lts IS NULL  
    THEN
        v_res := 'Faltan parametros 2222.';
    END IF;
    IF v_res='0' THEN
    --Validamos su credito 
        select SALDO , LIMITE INTO v_saldo , v_limite  FROM SG_CLIENTES  WHERE ID_CLIENTE  = p_id_cliente;
        SELECT IMPORTE_BS,TURNO , FECHA   INTO v_litros ,v_turno , v_fecha  FROM SG_VENTAS_CREDITO WHERE ID_VENTA =p_ID_VENTA ;
        v_total := (v_saldo  - v_litros) +(p_importe_lts *     p_precio) ;
        IF v_total > v_limite THEN
            v_res := 'No puede exceder el limite te prestamo . Limite de prestamo permitido :'||v_limite||' Total consumo : '||v_total;
        END IF;
     END IF;
     
    IF v_res='0' THEN
       
        SELECT IMPORTE_LTS INTO v_litros  FROM SG_VENTAS_CREDITO WHERE ID_VENTA =p_ID_VENTA ;
        
        UPDATE SG_VENTAS_CREDITO SET IMPORTE_LTS = p_IMPORTE_LTS , IMPORTE_BS = p_IMPORTE_BS WHERE ID_VENTA =p_ID_VENTA ;
        
         UPDATE SG_CLIENTES    SET CONSUMO = CONSUMO -v_litros + p_importe_lts  WHERE ID_CLIENTE  = p_ID_CLIENTE ;
          
        UPDATE SG_KARDEX_CLIENTE SET CONSUMO = p_IMPORTE_BS WHERE ID_OPERACION = p_ID_VENTA AND OPERACION  = 'VENTA CREDITO';
--        DELETE FROM SG_KARDEX_CLIENTE WHERE ID_OPERACION = p_ID_VENTA AND OPERACION  = 'VENTA CREDITO';
--        INSERT INTO SG_KARDEX_CLIENTE  ( ID_KARDEX, ID_CLIENTE , ID_OPERACION ,OPERACION ,FECHA ,DETALLE, CONSUMO , AMORTIZACION  ,SALDO, ID_USUARIO ,FECHA_REG )
--                 VALUES (Q_SG_KARDEX_CLIENTE.nextval , p_id_cliente , p_ID_VENTA , 'VENTA CREDITO' ,p_fecha,'CONSUMO : '||v_combustible ||  '- '||p_turno,p_IMPORTE_BS,0,0,p_id_usr,sysdate );
     END IF;
END IF;
    if v_res = '0' THEN
        v_res := '1';
         P_SG_ACT_KARDEX_CLIENTE(p_ID_CLIENTE,p_fecha,p_id_usr,v_res);
         
     COMMIT;
        P_SP_ACTUALIZAR_CREDITO(v_fecha,v_turno,p_id_usr,v_res);
    ELSE
        ROLLBACK;
        
    END IF;
    p_res := v_res;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
v_errC:=substr(sqlcode,1,20);
v_errD:=substr(sqlerrm,1,200);
p_grabar_error_bd(v_errC,v_errD,'Modulo de Creditos','P_SG_GUARDAR_VENTA_CREDITO','-','-',v_id_log);
p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_REG;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_REG(
p_turno OUT VARCHAR2,
p_fecha OUT VARCHAR2,
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para verificar si se puiede editar
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje ("0")  No existe Modificacion y  "1"  Existe Modificacion
  Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
  v_fecha DATE ;
  v_turno VARCHAR2(100) := 'DIA';
  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
      select count(1) into v_cnt from SG_POS_TURNOS ;     
        IF v_cnt = 0 THEN
         v_res :='0';
        ELSE
            SELECT FECHA , TURNO INTO v_fecha , v_turno
            FROM(
                select FECHA , TURNO   ,ROW_NUMBER() OVER( order by ID_POS_TURNO   desc ) AS ROWN2
                from SG_POS_TURNOS
                WHERE FECHA = (
                    SELECT FECHA FROM (
                    select FECHA , ROW_NUMBER() OVER( order by FECHA  desc )  as ROWN
                    from SG_POS_TURNOS
                    group by FECHA)
                WHERE  ROWN =1) 
            )
            WHERE ROWN2= 1  ;
            
            
            
            IF v_turno = 'DIA' tHEN
              P_SG_VERIFICAR_EDICION(v_fecha,v_turno,v_res);
                  IF v_res = '1' THEN
                        p_turno := 'TARDE' ;
                        p_fecha := TO_CHAR(v_fecha, 'DD/MM/YYYY')  ;
                  ELSE 
                         p_turno := 'DIA' ;
                        p_fecha := TO_CHAR(v_fecha, 'DD/MM/YYYY')  ;
                  END IF;
            ELSIF  v_turno = 'TARDE' THEN
                P_SG_VERIFICAR_EDICION(v_fecha,v_turno,v_res);
                  IF v_res = '1' THEN
                        p_turno := 'NOCHE';
                        p_fecha := TO_CHAR(v_fecha, 'DD/MM/YYYY')  ;
                  ELSE 
                         p_turno := 'TARDE';
                         p_fecha := TO_CHAR(v_fecha, 'DD/MM/YYYY')  ;
                  END IF;
            ELSIF v_turno = 'NOCHE' THEN
                 P_SG_VERIFICAR_EDICION(v_fecha,v_turno,v_res);
                  IF v_res = '1' THEN
                        p_turno := 'DIA';
                        p_fecha := TO_CHAR(v_fecha +1, 'DD/MM/YYYY')  ;
                  ELSE 
                         p_turno := 'NOCHE';
                      p_fecha := TO_CHAR(v_fecha, 'DD/MM/YYYY')  ;
                  END IF;
            
            END IF;
            v_res := '1';
        END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_TURNOS','P_SG_VERIFICAR_EDICION','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/


DROP PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_REG_MN;

CREATE OR REPLACE PROCEDURE CITYTRUCK.P_SG_OBTENER_ULTIMO_REG_MN(
p_fecha OUT VARCHAR2,
 p_res OUT  VARCHAR2
)
 /*
 Finalidad: Procedimiento para verificar si se puiede editar
 Recibe:  p_fecha  .. p_turno -> Parametros del cuadro pos turno
 Retorna: p_res(parametro de salida)->Mensaje ("0")  No existe Modificacion y  "1"  Existe Modificacion
  Fecha Creacion: 26/07/2013
 Autor: Ubaldo Villazon 
 Rev:
 */
IS
 v_cnt NUMBER:=0;
 v_res VARCHAR2(100):='0';
  v_ent_litter_ini NUMBER:=0;
  v_fecha DATE ;
  v_turno VARCHAR2(100) := 'DIA';
  
 v_errC SG_AUX_LOG_ERRORES.cod_error%type;
 v_errD SG_AUX_LOG_ERRORES.desc_error%type;
 v_id_log SG_AUX_LOG_ERRORES.id_log%type;
BEGIN

  IF v_res='0' THEN
    -- Verificamos Si Existe algun registro no exista 
      select count(1) into v_cnt from SG_POS_DIA_MN  ;     
        IF v_cnt = 0 THEN
            v_res :='0';
        ELSE
               SELECT FECHA into v_fecha  FROM (
                    select FECHA , ROW_NUMBER() OVER( order by FECHA  desc )  as ROWN
                    from SG_POS_DIA_MN 
                    group by FECHA)
                WHERE  ROWN =1;
           
              P_SG_VERIFICAR_EDICION_MN(v_fecha,v_res);
                  IF v_res = '1' THEN
                        p_fecha := TO_CHAR(v_fecha+1, 'DD/MM/YYYY')  ;
                  ELSE 
                        v_res := '1';
                        p_fecha := TO_CHAR(v_fecha, 'DD/MM/YYYY')  ;
                  END IF;
            END IF;
  END IF;
  p_res := v_res;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    v_errC:=substr(sqlcode,1,20);
    v_errD:=substr(sqlerrm,1,200);
    p_grabar_error_bd(v_errC,v_errD,'Generar POS_DIA_MN','P_SG_OBTENER_ULTIMO_REG_MN','-',1,v_id_log);
    p_res :='ERROR. Avise a TI. LOG generado #' || v_id_log;
END;
/
DROP SEQUENCE CITYTRUCK.Q_SG_AJUSTES_TANQUE;

CREATE SEQUENCE CITYTRUCK.Q_SG_AJUSTES_TANQUE
  START WITH 452
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_AJUSTE_POS;

CREATE SEQUENCE CITYTRUCK.Q_SG_AJUSTE_POS
  START WITH 593
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_AMORTIZACIONES;

CREATE SEQUENCE CITYTRUCK.Q_SG_AMORTIZACIONES
  START WITH 182
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_AUX_LOG_ERRORES;

CREATE SEQUENCE CITYTRUCK.Q_SG_AUX_LOG_ERRORES
  START WITH 202
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_CAJAS;

CREATE SEQUENCE CITYTRUCK.Q_SG_CAJAS
  START WITH 11
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_CLIENTES;

CREATE SEQUENCE CITYTRUCK.Q_SG_CLIENTES
  START WITH 14
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_CLIENTES_CONSUMO;

CREATE SEQUENCE CITYTRUCK.Q_SG_CLIENTES_CONSUMO
  START WITH 10
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_CLIENTES_CREDITO;

CREATE SEQUENCE CITYTRUCK.Q_SG_CLIENTES_CREDITO
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_COMPRAS;

CREATE SEQUENCE CITYTRUCK.Q_SG_COMPRAS
  START WITH 1447
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_CONSUMOS;

CREATE SEQUENCE CITYTRUCK.Q_SG_CONSUMOS
  START WITH 746
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_DETALLES_COMPRAS;

CREATE SEQUENCE CITYTRUCK.Q_SG_DETALLES_COMPRAS
  START WITH 2870
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_EGRESOS;

CREATE SEQUENCE CITYTRUCK.Q_SG_EGRESOS
  START WITH 1400
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_FACTURAS_MN;

CREATE SEQUENCE CITYTRUCK.Q_SG_FACTURAS_MN
  START WITH 1436
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_HIST_EDICION_DATOS;

CREATE SEQUENCE CITYTRUCK.Q_SG_HIST_EDICION_DATOS
  START WITH 117
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_INGRESOS;

CREATE SEQUENCE CITYTRUCK.Q_SG_INGRESOS
  START WITH 264
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_KARDEX_CLIENTE;

CREATE SEQUENCE CITYTRUCK.Q_SG_KARDEX_CLIENTE
  START WITH 2581
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_KARDEX_COMBUSTIBLE;

CREATE SEQUENCE CITYTRUCK.Q_SG_KARDEX_COMBUSTIBLE
  START WITH 1751
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_KARDEX_COMBUSTIBLE_MN;

CREATE SEQUENCE CITYTRUCK.Q_SG_KARDEX_COMBUSTIBLE_MN
  START WITH 2691
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_KARDEX_EFECTIVO;

CREATE SEQUENCE CITYTRUCK.Q_SG_KARDEX_EFECTIVO
  START WITH 5370
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_LISTAS;

CREATE SEQUENCE CITYTRUCK.Q_SG_LISTAS
  START WITH 14
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_LISTAS_ITEMS;

CREATE SEQUENCE CITYTRUCK.Q_SG_LISTAS_ITEMS
  START WITH 31
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_PERFILES;

CREATE SEQUENCE CITYTRUCK.Q_SG_PERFILES
  START WITH 7
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_PERFILES_OPCIONES;

CREATE SEQUENCE CITYTRUCK.Q_SG_PERFILES_OPCIONES
  START WITH 23
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_POS_DIA_MN;

CREATE SEQUENCE CITYTRUCK.Q_SG_POS_DIA_MN
  START WITH 1209
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_POS_TURNOS;

CREATE SEQUENCE CITYTRUCK.Q_SG_POS_TURNOS
  START WITH 19417
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_TABLA_TMP;

CREATE SEQUENCE CITYTRUCK.Q_SG_TABLA_TMP
  START WITH 1637
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_TRANSFERENCIAS;

CREATE SEQUENCE CITYTRUCK.Q_SG_TRANSFERENCIAS
  START WITH 41
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_USUARIOS;

CREATE SEQUENCE CITYTRUCK.Q_SG_USUARIOS
  START WITH 12
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_VENTAS_CREDITO;

CREATE SEQUENCE CITYTRUCK.Q_SG_VENTAS_CREDITO
  START WITH 2391
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_VENTAS_DIARIAS;

CREATE SEQUENCE CITYTRUCK.Q_SG_VENTAS_DIARIAS
  START WITH 2178
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


DROP SEQUENCE CITYTRUCK.Q_SG_VENTAS_DIARIAS_MN;

CREATE SEQUENCE CITYTRUCK.Q_SG_VENTAS_DIARIAS_MN
  START WITH 12
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;
ALTER TABLE CITYTRUCK.SG_AUX_LOG_ERRORES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_AUX_LOG_ERRORES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_AUX_LOG_ERRORES
(
  ID_LOG      NUMBER(12),
  LOGIN_USR   VARCHAR2(20 BYTE),
  FECHA       DATE,
  MODULO      VARCHAR2(100 BYTE),
  NOMBRE_SP   VARCHAR2(50 BYTE),
  COD_ERROR   VARCHAR2(50 BYTE),
  DESC_ERROR  VARCHAR2(200 BYTE),
  CAD_SQL     VARCHAR2(1000 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_CAJAS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_CAJAS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_CAJAS
(
  ID_CAJA      NUMBER(7)                        NOT NULL,
  CODIGO       VARCHAR2(40 BYTE)                NOT NULL,
  NOMBRE       VARCHAR2(40 BYTE)                NOT NULL,
  NRO_CUENTA   VARCHAR2(40 BYTE),
  MONEDA       VARCHAR2(40 BYTE)                NOT NULL,
  DESCRIPCION  VARCHAR2(150 BYTE)               NOT NULL,
  SALDO        NUMBER(15,5)                     NOT NULL,
  ID_USUARIO   NUMBER(5)                        NOT NULL,
  FECHA_REG    DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_CLIENTES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_CLIENTES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_CLIENTES
(
  ID_CLIENTE  NUMBER(7)                         NOT NULL,
  CODIGO      NUMBER(7)                         NOT NULL,
  FECHA       DATE                              NOT NULL,
  EMPRESA     VARCHAR2(40 BYTE)                 NOT NULL,
  NIT         VARCHAR2(40 BYTE)                 NOT NULL,
  CONTACTO    VARCHAR2(150 BYTE),
  TELEFONO    VARCHAR2(150 BYTE),
  DIRECCION   VARCHAR2(150 BYTE),
  LIMITE      NUMBER(15,5)                      NOT NULL,
  CONSUMO     NUMBER(15,5),
  SALDO       NUMBER(15,5),
  ID_USUARIO  NUMBER(5)                         NOT NULL,
  FECHA_REG   DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_CLIENTES_CONSUMO
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_CLIENTES_CONSUMO CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_CLIENTES_CONSUMO
(
  ID_CLIENTE   NUMBER(7)                        NOT NULL,
  CODIGO       NUMBER(7)                        NOT NULL,
  NOMBRE       VARCHAR2(40 BYTE)                NOT NULL,
  RESPONSABLE  VARCHAR2(150 BYTE),
  CONSUMO      NUMBER(15,5),
  ID_USUARIO   NUMBER(5)                        NOT NULL,
  FECHA_REG    DATE,
  CONSUMO_BS   NUMBER(15,5)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_CLIENTE_CONSUMO_COMBUSTIBLE
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_CLIENTE_CONSUMO_COMBUSTIBLE CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_CLIENTE_CONSUMO_COMBUSTIBLE
(
  ID_TABLA        NUMBER(7)                     NOT NULL,
  ID_CLIENTE      NUMBER(7),
  ID_COMBUSTIBLE  NUMBER(5),
  CLIENTE         VARCHAR2(250 BYTE),
  COMBUSTIBLE     VARCHAR2(250 BYTE),
  CONSUMO         NUMBER(15,5),
  CONSUMO_BS      NUMBER(15,5)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_COMBUSTIBLES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_COMBUSTIBLES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_COMBUSTIBLES
(
  ID_COMBUSTIBLE    NUMBER(5)                   NOT NULL,
  NOMBRE            VARCHAR2(40 BYTE)           NOT NULL,
  DESCRIPCION       VARCHAR2(150 BYTE)          NOT NULL,
  CANT_DISPONIBLE   NUMBER(15,5)                NOT NULL,
  PRECIO_VENTA      NUMBER(15,5),
  PRECIO_COMPRA     NUMBER(15,5),
  UNIDAD            VARCHAR2(40 BYTE)           NOT NULL,
  ESTADO            CHAR(1 BYTE)                NOT NULL,
  SALDO_INICIAL     NUMBER(15,5),
  SALDO_INICIAL_MN  NUMBER(15,5)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_COMPRAS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_COMPRAS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_COMPRAS
(
  ID_COMPRA       NUMBER(7)                     NOT NULL,
  NRO_COMP        NUMBER(7)                     NOT NULL,
  FECHA           DATE                          NOT NULL,
  ID_COMBUSTIBLE  NUMBER(5)                     NOT NULL,
  ID_CAJA         NUMBER(7)                     NOT NULL,
  CANTIDAD        NUMBER(15,5)                  NOT NULL,
  NRO_FACTURA     NUMBER(15)                    NOT NULL,
  TIPO            VARCHAR2(40 BYTE)             NOT NULL,
  PRECIO          NUMBER(15,5)                  NOT NULL,
  IMPORTE         NUMBER(15,5)                  NOT NULL,
  FORMULARIO      NUMBER(15,5)                  NOT NULL,
  TOTAL           NUMBER(15,5)                  NOT NULL,
  ID_USUARIO      NUMBER(5)                     NOT NULL,
  FECHA_REG       DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_DETALLES_COMPRAS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_DETALLES_COMPRAS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_DETALLES_COMPRAS
(
  ID_DETALLE  NUMBER(7)                         NOT NULL,
  ID_COMPRA   NUMBER(7)                         NOT NULL,
  DETALLE     VARCHAR2(250 BYTE)                NOT NULL,
  PRECIO      NUMBER(15,5)                      NOT NULL,
  IMPORTE     NUMBER(15,5)                      NOT NULL,
  ID_USUARIO  NUMBER(5)                         NOT NULL,
  FECHA_REG   DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_EGRESOS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_EGRESOS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_EGRESOS
(
  ID_EGRESO   NUMBER(7)                         NOT NULL,
  NRO_COMP    NUMBER(7)                         NOT NULL,
  FECHA       DATE                              NOT NULL,
  REGISTRAR   VARCHAR2(40 BYTE)                 NOT NULL,
  CONCEPTO    VARCHAR2(140 BYTE)                NOT NULL,
  ID_CAJA     NUMBER(7)                         NOT NULL,
  IMPORTE     NUMBER(15,5)                      NOT NULL,
  ID_USUARIO  NUMBER(5)                         NOT NULL,
  FECHA_REG   DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_FACTURAS_MN
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_FACTURAS_MN CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_FACTURAS_MN
(
  ID_FACTURA      NUMBER(7)                     NOT NULL,
  ID_COMBUSTIBLE  NUMBER(5)                     NOT NULL,
  FECHA           DATE                          NOT NULL,
  IMPORTE         NUMBER(15,5)                  NOT NULL,
  PRECIO          NUMBER(15,5),
  LITROS          NUMBER(15,5),
  ID_USUARIO      NUMBER(5)                     NOT NULL,
  FECHA_REG       DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_HIST_EDICION_DATOS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_HIST_EDICION_DATOS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_HIST_EDICION_DATOS
(
  ID_HIST      NUMBER(12)                       NOT NULL,
  ID_TABLA     NUMBER(12)                       NOT NULL,
  TABLA        VARCHAR2(30 BYTE)                NOT NULL,
  CAMPO        VARCHAR2(30 BYTE)                NOT NULL,
  VALOR_NUEVO  VARCHAR2(255 BYTE)               NOT NULL,
  MOTIVO       VARCHAR2(20 BYTE),
  FECHA_REG    DATE                             NOT NULL,
  LOGIN_USR    VARCHAR2(20 BYTE)                NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_INGRESOS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_INGRESOS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_INGRESOS
(
  ID_INGRESO       NUMBER(7)                    NOT NULL,
  NRO_COMP         NUMBER(7)                    NOT NULL,
  FECHA            DATE                         NOT NULL,
  REGISTRAR        VARCHAR2(40 BYTE)            NOT NULL,
  CONCEPTO         VARCHAR2(140 BYTE)           NOT NULL,
  ID_CAJA          NUMBER(7)                    NOT NULL,
  IMPORTE          NUMBER(15,5)                 NOT NULL,
  ID_USUARIO       NUMBER(5)                    NOT NULL,
  FECHA_REG        DATE,
  ID_AMORTIZACION  NUMBER(7)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_KARDEX_CLIENTE
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_KARDEX_CLIENTE CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_KARDEX_CLIENTE
(
  ID_KARDEX     NUMBER(7)                       NOT NULL,
  ID_CLIENTE    NUMBER(7)                       NOT NULL,
  ID_OPERACION  NUMBER(7)                       NOT NULL,
  OPERACION     VARCHAR2(250 BYTE)              NOT NULL,
  FECHA         DATE                            NOT NULL,
  DETALLE       VARCHAR2(250 BYTE)              NOT NULL,
  CONSUMO       NUMBER(15,5)                    NOT NULL,
  AMORTIZACION  NUMBER(15,5)                    NOT NULL,
  SALDO         NUMBER(15,5)                    NOT NULL,
  ID_USUARIO    NUMBER(5)                       NOT NULL,
  FECHA_REG     DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE
(
  ID_KARDEX       NUMBER(7)                     NOT NULL,
  ID_COMBUSTIBLE  NUMBER(5)                     NOT NULL,
  FECHA           DATE                          NOT NULL,
  SALDO_INICIAL   NUMBER(15,5)                  NOT NULL,
  COMPRAS         NUMBER(15,5),
  VENTAS          NUMBER(15,5),
  AJUSTES         NUMBER(15,5),
  ACUMULADOS      NUMBER(15,5)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE_MN
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE_MN CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE_MN
(
  ID_KARDEX       NUMBER(7)                     NOT NULL,
  ID_COMBUSTIBLE  NUMBER(5)                     NOT NULL,
  FECHA           DATE                          NOT NULL,
  SALDO_INICIAL   NUMBER(15,5)                  NOT NULL,
  COMPRAS         NUMBER(15,5),
  VENTAS          NUMBER(15,5),
  AJUSTES         NUMBER(15,5),
  ACUMULADOS      NUMBER(15,5)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_KARDEX_EFECTIVO
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_KARDEX_EFECTIVO CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_KARDEX_EFECTIVO
(
  ID_KARDEX     NUMBER(7)                       NOT NULL,
  ID_CAJA       NUMBER(7)                       NOT NULL,
  ID_OPERACION  NUMBER(7)                       NOT NULL,
  OPERACION     VARCHAR2(250 BYTE)              NOT NULL,
  FECHA         DATE                            NOT NULL,
  DETALLE       VARCHAR2(250 BYTE)              NOT NULL,
  INGRESO       NUMBER(15,5)                    NOT NULL,
  EGRESO        NUMBER(15,5)                    NOT NULL,
  SALDO         NUMBER(15,5)                    NOT NULL,
  ID_USUARIO    NUMBER(5)                       NOT NULL,
  FECHA_REG     DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_LISTAS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_LISTAS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_LISTAS
(
  ID_LISTA     NUMBER(7)                        NOT NULL,
  LISTA        VARCHAR2(20 BYTE)                NOT NULL,
  DESCRIPCION  VARCHAR2(50 BYTE),
  TAM_LIMITE   NUMBER(5)                        NOT NULL,
  TIPO_VALOR   VARCHAR2(10 BYTE)                NOT NULL,
  MAYUS_MINUS  VARCHAR2(5 BYTE)                 NOT NULL,
  ESTADO       VARCHAR2(15 BYTE)                NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

COMMENT ON TABLE CITYTRUCK.SG_LISTAS IS 'Tabla de parametros. Definicion de cabecera de listas de parametros predefinidos.';

COMMENT ON COLUMN CITYTRUCK.SG_LISTAS.ID_LISTA IS 'Identificador unico para cada registro';

COMMENT ON COLUMN CITYTRUCK.SG_LISTAS.LISTA IS 'Nombre del parametro de lista';

COMMENT ON COLUMN CITYTRUCK.SG_LISTAS.DESCRIPCION IS 'Descripcion del elemento';

COMMENT ON COLUMN CITYTRUCK.SG_LISTAS.TAM_LIMITE IS 'Cantidad de caracteres o digitos que puede contener';

COMMENT ON COLUMN CITYTRUCK.SG_LISTAS.TIPO_VALOR IS 'Tipo de valor que acepta (CADENA o NUMERICO)';

COMMENT ON COLUMN CITYTRUCK.SG_LISTAS.MAYUS_MINUS IS 'Indica si se aceptan solo mayusculas (MAYUS) o ambos (MINUS)';

COMMENT ON COLUMN CITYTRUCK.SG_LISTAS.ESTADO IS 'Estado en el que se encuentra el documento';


ALTER TABLE CITYTRUCK.SG_LISTAS_ITEMS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_LISTAS_ITEMS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_LISTAS_ITEMS
(
  ID_TABLA  NUMBER(7)                           NOT NULL,
  ID_PADRE  NUMBER(7),
  ID_LISTA  NUMBER(7)                           NOT NULL,
  CODIGO    VARCHAR2(5 BYTE),
  VALOR     VARCHAR2(30 BYTE)                   NOT NULL,
  ESTADO    CHAR(1 BYTE)                        NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_MENU_OPCIONES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_MENU_OPCIONES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_MENU_OPCIONES
(
  ID_OPC    NUMBER(5)                           NOT NULL,
  OPCION    VARCHAR2(40 BYTE)                   NOT NULL,
  LINK      VARCHAR2(50 BYTE),
  TOOLTIP   VARCHAR2(50 BYTE),
  ICONO     VARCHAR2(50 BYTE),
  ESTILO    VARCHAR2(50 BYTE),
  ID_PADRE  NUMBER(5),
  ESTADO    CHAR(1 BYTE)                        NOT NULL,
  ORDEN     NUMBER                              NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_PERFILES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_PERFILES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_PERFILES
(
  ID_PERFIL    NUMBER(5)                        NOT NULL,
  NOMBRE       VARCHAR2(40 BYTE)                NOT NULL,
  DESCRIPCION  VARCHAR2(50 BYTE)                NOT NULL,
  ESTADO       CHAR(1 BYTE)                     NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_PERFILES_OPCIONES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_PERFILES_OPCIONES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_PERFILES_OPCIONES
(
  ID_PRF_OPC  NUMBER(5)                         NOT NULL,
  ID_PERFIL   NUMBER(5)                         NOT NULL,
  ID_OPC      NUMBER(5)                         NOT NULL,
  ESTADO      CHAR(1 BYTE)                      NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_POS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_POS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_POS
(
  ID_POS             NUMBER(7)                  NOT NULL,
  CODIGO             VARCHAR2(40 BYTE)          NOT NULL,
  ID_COMBUSTIBLE     NUMBER(5)                  NOT NULL,
  ENT_LITTER_INI     NUMBER(15,5)               NOT NULL,
  LITTER_ACT         NUMBER(15,5)               NOT NULL,
  ESTADO             CHAR(1 BYTE)               NOT NULL,
  DESCRIPCION        VARCHAR2(300 BYTE),
  ENT_LITTER_INI_MN  NUMBER(15,5),
  LITTER_ACT_MN      NUMBER(15,5)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_POS_DIA_MN
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_POS_DIA_MN CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_POS_DIA_MN
(
  ID_POS_DIA_MN  NUMBER(7)                      NOT NULL,
  ID_POS         NUMBER(7)                      NOT NULL,
  FECHA          DATE                           NOT NULL,
  ENT_LITTER     NUMBER(15,5)                   NOT NULL,
  SAL_LITTER     NUMBER(15,5)                   NOT NULL,
  TOTAL          NUMBER(15,5)                   NOT NULL,
  TOTAL_VENTA    NUMBER(15,5),
  TOTAL_COSTO    NUMBER(15,5),
  ID_USUARIO     NUMBER(5)                      NOT NULL,
  FECHA_REG      DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_POS_TURNOS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_POS_TURNOS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_POS_TURNOS
(
  ID_POS_TURNO  NUMBER(7)                       NOT NULL,
  ID_POS        NUMBER(7)                       NOT NULL,
  TURNO         VARCHAR2(50 BYTE)               NOT NULL,
  FECHA         DATE                            NOT NULL,
  ENT_LITTER    NUMBER(15,5)                    NOT NULL,
  SAL_LITTER    NUMBER(15,5)                    NOT NULL,
  TOTAL         NUMBER(15,5)                    NOT NULL,
  TOTAL_VENTA   NUMBER(15,5),
  TOTAL_COSTO   NUMBER(15,5),
  ID_USUARIO    NUMBER(5)                       NOT NULL,
  FECHA_REG     DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_TANQUES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_TANQUES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_TANQUES
(
  ID_TANQUE         NUMBER(5)                   NOT NULL,
  ID_COMBUSTIBLE    NUMBER(5)                   NOT NULL,
  NOMBRE            VARCHAR2(40 BYTE)           NOT NULL,
  CANT_DISPONIBLE   NUMBER(15,5)                NOT NULL,
  SALDO_INICIAL     NUMBER(15,5),
  LIMITE            NUMBER(15,5),
  ULT_AJUSTE        NUMBER(15,5),
  SALDO_INICIAL_MN  NUMBER(15,5)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_TRANSFERENCIAS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_TRANSFERENCIAS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_TRANSFERENCIAS
(
  ID_TRANSFERENCIA  NUMBER(7)                   NOT NULL,
  ID_CAJA_ORIGEN    NUMBER(7)                   NOT NULL,
  ID_CAJA_DESTINO   NUMBER(7)                   NOT NULL,
  NRO_COMP          NUMBER(7)                   NOT NULL,
  FECHA             DATE                        NOT NULL,
  CONCEPTO          VARCHAR2(250 BYTE),
  IMPORTE_BS        NUMBER(15,5)                NOT NULL,
  ID_USUARIO        NUMBER(5)                   NOT NULL,
  FECHA_REG         DATE,
  OBSERVACION       VARCHAR2(300 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_USUARIOS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_USUARIOS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_USUARIOS
(
  ID_USUARIO  NUMBER(5)                         NOT NULL,
  LOGIN       VARCHAR2(15 BYTE)                 NOT NULL,
  NOMBRE      VARCHAR2(60 BYTE)                 NOT NULL,
  EMAIL       VARCHAR2(30 BYTE),
  FCH_ALTA    DATE                              NOT NULL,
  FCH_BAJA    DATE,
  ID_PERFIL   NUMBER(5)                         NOT NULL,
  ESTADO      CHAR(1 BYTE)                      NOT NULL,
  CONTRASENA  VARCHAR2(300 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_VENTAS_CREDITO
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_VENTAS_CREDITO CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_VENTAS_CREDITO
(
  ID_VENTA        NUMBER(7)                     NOT NULL,
  ID_COMBUSTIBLE  NUMBER(5)                     NOT NULL,
  ID_CLIENTE      NUMBER(7)                     NOT NULL,
  NRO_COMP        NUMBER(7)                     NOT NULL,
  FECHA           DATE                          NOT NULL,
  TURNO           VARCHAR2(40 BYTE)             NOT NULL,
  PRECIO          NUMBER(15,5)                  NOT NULL,
  IMPORTE_BS      NUMBER(15,5)                  NOT NULL,
  IMPORTE_LTS     NUMBER(15,5)                  NOT NULL,
  RESPONSABLE     VARCHAR2(250 BYTE),
  ID_USUARIO      NUMBER(5)                     NOT NULL,
  FECHA_REG       DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_VENTAS_DIARIAS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_VENTAS_DIARIAS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_VENTAS_DIARIAS
(
  ID_VENTA     NUMBER(5)                        NOT NULL,
  TURNO        VARCHAR2(50 BYTE)                NOT NULL,
  RESPONSABLE  VARCHAR2(250 BYTE),
  FECHA        DATE                             NOT NULL,
  TOTAL        NUMBER(15,5)                     NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


DROP TABLE CITYTRUCK.SG_VENTAS_DIARIAS_MN CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_VENTAS_DIARIAS_MN
(
  ID_VENTA  NUMBER(5)                           NOT NULL,
  FECHA     DATE                                NOT NULL,
  TOTAL     NUMBER(15,5)                        NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE UNIQUE INDEX CITYTRUCK.PK_SG_LISTAS ON CITYTRUCK.SG_LISTAS
(ID_LISTA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_AUX_LOG_ERRORES_PK ON CITYTRUCK.SG_AUX_LOG_ERRORES
(ID_LOG)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_CAJAS_PK ON CITYTRUCK.SG_CAJAS
(ID_CAJA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_CLIENTES_CONSUMO_PK ON CITYTRUCK.SG_CLIENTES_CONSUMO
(ID_CLIENTE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_CLIENTES_PK ON CITYTRUCK.SG_CLIENTES
(ID_CLIENTE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_CLIENTE_CONSUMO_COMBUSTI_PK ON CITYTRUCK.SG_CLIENTE_CONSUMO_COMBUSTIBLE
(ID_TABLA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_COMBUSTIBLES_PK ON CITYTRUCK.SG_COMBUSTIBLES
(ID_COMBUSTIBLE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_COMPRAS_PK ON CITYTRUCK.SG_COMPRAS
(ID_COMPRA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_DETALLES_COMPRAS_PK ON CITYTRUCK.SG_DETALLES_COMPRAS
(ID_DETALLE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_EGRESOS_PK ON CITYTRUCK.SG_EGRESOS
(ID_EGRESO)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_FACTURAS_MN_PK ON CITYTRUCK.SG_FACTURAS_MN
(ID_FACTURA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_HIST_EDICION_DATOS_PK ON CITYTRUCK.SG_HIST_EDICION_DATOS
(ID_HIST)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_INGRESOS_PK ON CITYTRUCK.SG_INGRESOS
(ID_INGRESO)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_KARDEX_CLIENTE_PK ON CITYTRUCK.SG_KARDEX_CLIENTE
(ID_KARDEX)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_KARDEX_COMBUSTIBLE_MN_PK ON CITYTRUCK.SG_KARDEX_COMBUSTIBLE_MN
(ID_KARDEX)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_KARDEX_COMBUSTIBLE_PK ON CITYTRUCK.SG_KARDEX_COMBUSTIBLE
(ID_KARDEX)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_KARDEX_EFECTIVO_PK ON CITYTRUCK.SG_KARDEX_EFECTIVO
(ID_KARDEX)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_LISTAS_ITEMS_PK ON CITYTRUCK.SG_LISTAS_ITEMS
(ID_TABLA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_MENU_OPCIONES_PK ON CITYTRUCK.SG_MENU_OPCIONES
(ID_OPC)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_PERFILES_OPCIONES_PK ON CITYTRUCK.SG_PERFILES_OPCIONES
(ID_PRF_OPC)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_PERFILES_PK ON CITYTRUCK.SG_PERFILES
(ID_PERFIL)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_POS_DIA_MN_PK ON CITYTRUCK.SG_POS_DIA_MN
(ID_POS_DIA_MN)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_POS_PK ON CITYTRUCK.SG_POS
(ID_POS)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_POS_TURNOS_PK ON CITYTRUCK.SG_POS_TURNOS
(ID_POS_TURNO)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_TANQUES_PK ON CITYTRUCK.SG_TANQUES
(ID_TANQUE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_USUARIOS_PK ON CITYTRUCK.SG_USUARIOS
(ID_USUARIO)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_VENTAS_CREDITO_PK ON CITYTRUCK.SG_VENTAS_CREDITO
(ID_VENTA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_VENTAS_DIARIAS_PK ON CITYTRUCK.SG_VENTAS_DIARIAS
(ID_VENTA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


ALTER TABLE CITYTRUCK.SG_AJUSTES_TANQUE
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_AJUSTES_TANQUE CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_AJUSTES_TANQUE
(
  ID_AJUSTE    NUMBER(7)                        NOT NULL,
  ID_TANQUE    NUMBER(5)                        NOT NULL,
  NRO_COMP     NUMBER(7)                        NOT NULL,
  FECHA        DATE                             NOT NULL,
  CANTIDAD     NUMBER(15,5)                     NOT NULL,
  OBSERVACION  VARCHAR2(140 BYTE)               NOT NULL,
  ID_USUARIO   NUMBER(5)                        NOT NULL,
  FECHA_REG    DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_AJUSTE_POS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_AJUSTE_POS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_AJUSTE_POS
(
  ID_AJUSTE   NUMBER(7)                         NOT NULL,
  ID_POS      NUMBER(7)                         NOT NULL,
  FECHA       DATE                              NOT NULL,
  AJUSTE      NUMBER(15,5),
  ID_USUARIO  NUMBER(5)                         NOT NULL,
  FECHA_REG   DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
ENABLE ROW MOVEMENT;


ALTER TABLE CITYTRUCK.SG_AJUSTE_PRECIO
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_AJUSTE_PRECIO CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_AJUSTE_PRECIO
(
  ID_AJUSTE       NUMBER(7)                     NOT NULL,
  ID_COMBUSTIBLE  NUMBER(5)                     NOT NULL,
  FECHA_ALTA      DATE                          NOT NULL,
  FECHA_BAJA      DATE,
  TIPO            VARCHAR2(250 BYTE)            NOT NULL,
  PRECIO          NUMBER(15,5)                  NOT NULL,
  ID_USUARIO      NUMBER(5)                     NOT NULL,
  ESTADO          VARCHAR2(1 BYTE)              NOT NULL,
  FECHA_REG       DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_AMORTIZACIONES
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_AMORTIZACIONES CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_AMORTIZACIONES
(
  ID_AMORTIZACION  NUMBER(7)                    NOT NULL,
  ID_CLIENTE       NUMBER(7)                    NOT NULL,
  ID_CAJA          NUMBER(7)                    NOT NULL,
  NRO_COMP         NUMBER(7)                    NOT NULL,
  FECHA            DATE                         NOT NULL,
  CONCEPTO         VARCHAR2(250 BYTE)           NOT NULL,
  IMPORTE_BS       NUMBER(15,5)                 NOT NULL,
  ID_USUARIO       NUMBER(5)                    NOT NULL,
  FECHA_REG        DATE,
  OBSERVACION      VARCHAR2(300 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_CARGA_MUERTA
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_CARGA_MUERTA CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_CARGA_MUERTA
(
  ID_CARGA        NUMBER(7)                     NOT NULL,
  ID_COMBUSTIBLE  NUMBER(7)                     NOT NULL,
  FECHA           DATE                          NOT NULL,
  CARGA           NUMBER(15,5),
  ID_USUARIO      NUMBER(5)                     NOT NULL,
  FECHA_REG       DATE
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


ALTER TABLE CITYTRUCK.SG_CONSUMOS
 DROP PRIMARY KEY CASCADE;

DROP TABLE CITYTRUCK.SG_CONSUMOS CASCADE CONSTRAINTS;

CREATE TABLE CITYTRUCK.SG_CONSUMOS
(
  ID_CONSUMO      NUMBER(7)                     NOT NULL,
  ID_COMBUSTIBLE  NUMBER(5)                     NOT NULL,
  ID_CLIENTE      NUMBER(7)                     NOT NULL,
  NRO_COMP        NUMBER(7)                     NOT NULL,
  FECHA           DATE                          NOT NULL,
  TURNO           VARCHAR2(40 BYTE)             NOT NULL,
  PRECIO          NUMBER(15,5)                  NOT NULL,
  IMPORTE_BS      NUMBER(15,5)                  NOT NULL,
  IMPORTE_LTS     NUMBER(15,5)                  NOT NULL,
  RESPONSABLE     VARCHAR2(250 BYTE),
  ID_USUARIO      NUMBER(5)                     NOT NULL,
  FECHA_REG       DATE,
  ID_POS          NUMBER(7),
  TIPO            VARCHAR2(20 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE UNIQUE INDEX CITYTRUCK.SG_AJUSTES_TANQUE_PK ON CITYTRUCK.SG_AJUSTES_TANQUE
(ID_AJUSTE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_AJUSTE_POS_PK ON CITYTRUCK.SG_AJUSTE_POS
(ID_AJUSTE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_AJUSTE_PRECIO_PK ON CITYTRUCK.SG_AJUSTE_PRECIO
(ID_AJUSTE)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_AMORTIZACIONES_PK ON CITYTRUCK.SG_AMORTIZACIONES
(ID_AMORTIZACION)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_CARGA_MUERTA_PK ON CITYTRUCK.SG_CARGA_MUERTA
(ID_CARGA)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX CITYTRUCK.SG_CONSUMOS_PK ON CITYTRUCK.SG_CONSUMOS
(ID_CONSUMO)
LOGGING
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


ALTER TABLE CITYTRUCK.SG_AUX_LOG_ERRORES ADD (
  CONSTRAINT SG_AUX_LOG_ERRORES_PK
 PRIMARY KEY
 (ID_LOG)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_CAJAS ADD (
  CONSTRAINT SG_CAJAS_PK
 PRIMARY KEY
 (ID_CAJA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_CLIENTES ADD (
  CONSTRAINT SG_CLIENTES_PK
 PRIMARY KEY
 (ID_CLIENTE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_CLIENTES_CONSUMO ADD (
  CONSTRAINT SG_CLIENTES_CONSUMO_PK
 PRIMARY KEY
 (ID_CLIENTE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_CLIENTE_CONSUMO_COMBUSTIBLE ADD (
  CONSTRAINT SG_CLIENTE_CONSUMO_COMBUSTI_PK
 PRIMARY KEY
 (ID_TABLA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_COMBUSTIBLES ADD (
  CONSTRAINT SG_COMBUSTIBLES_PK
 PRIMARY KEY
 (ID_COMBUSTIBLE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_COMPRAS ADD (
  CONSTRAINT SG_COMPRAS_PK
 PRIMARY KEY
 (ID_COMPRA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_DETALLES_COMPRAS ADD (
  CONSTRAINT SG_DETALLES_COMPRAS_PK
 PRIMARY KEY
 (ID_DETALLE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_EGRESOS ADD (
  CONSTRAINT SG_EGRESOS_PK
 PRIMARY KEY
 (ID_EGRESO)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_FACTURAS_MN ADD (
  CONSTRAINT SG_FACTURAS_MN_PK
 PRIMARY KEY
 (ID_FACTURA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_HIST_EDICION_DATOS ADD (
  CONSTRAINT SG_HIST_EDICION_DATOS_PK
 PRIMARY KEY
 (ID_HIST)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_INGRESOS ADD (
  CONSTRAINT SG_INGRESOS_PK
 PRIMARY KEY
 (ID_INGRESO)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_KARDEX_CLIENTE ADD (
  CONSTRAINT SG_KARDEX_CLIENTE_PK
 PRIMARY KEY
 (ID_KARDEX)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE ADD (
  CONSTRAINT SG_KARDEX_COMBUSTIBLE_PK
 PRIMARY KEY
 (ID_KARDEX)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE_MN ADD (
  CONSTRAINT SG_KARDEX_COMBUSTIBLE_MN_PK
 PRIMARY KEY
 (ID_KARDEX)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_KARDEX_EFECTIVO ADD (
  CONSTRAINT SG_KARDEX_EFECTIVO_PK
 PRIMARY KEY
 (ID_KARDEX)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_LISTAS ADD (
  CONSTRAINT PK_SG_LISTAS
 PRIMARY KEY
 (ID_LISTA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_LISTAS_ITEMS ADD (
  CONSTRAINT SG_LISTAS_ITEMS_PK
 PRIMARY KEY
 (ID_TABLA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_MENU_OPCIONES ADD (
  CONSTRAINT SG_MENU_OPCIONES_PK
 PRIMARY KEY
 (ID_OPC)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_PERFILES ADD (
  CONSTRAINT SG_PERFILES_PK
 PRIMARY KEY
 (ID_PERFIL)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_PERFILES_OPCIONES ADD (
  CONSTRAINT SG_PERFILES_OPCIONES_PK
 PRIMARY KEY
 (ID_PRF_OPC)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_POS ADD (
  CONSTRAINT SG_POS_PK
 PRIMARY KEY
 (ID_POS)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_POS_DIA_MN ADD (
  CONSTRAINT SG_POS_DIA_MN_PK
 PRIMARY KEY
 (ID_POS_DIA_MN)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_POS_TURNOS ADD (
  CONSTRAINT SG_POS_TURNOS_PK
 PRIMARY KEY
 (ID_POS_TURNO)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_TANQUES ADD (
  CONSTRAINT SG_TANQUES_PK
 PRIMARY KEY
 (ID_TANQUE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_TRANSFERENCIAS ADD (
  PRIMARY KEY
 (ID_TRANSFERENCIA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_USUARIOS ADD (
  CONSTRAINT SG_USUARIOS_PK
 PRIMARY KEY
 (ID_USUARIO)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_VENTAS_CREDITO ADD (
  CONSTRAINT SG_VENTAS_CREDITO_PK
 PRIMARY KEY
 (ID_VENTA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_VENTAS_DIARIAS ADD (
  CONSTRAINT SG_VENTAS_DIARIAS_PK
 PRIMARY KEY
 (ID_VENTA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_AJUSTES_TANQUE ADD (
  CONSTRAINT SG_AJUSTES_TANQUE_PK
 PRIMARY KEY
 (ID_AJUSTE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_AJUSTE_POS ADD (
  CONSTRAINT SG_AJUSTE_POS_PK
 PRIMARY KEY
 (ID_AJUSTE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_AJUSTE_PRECIO ADD (
  CONSTRAINT SG_AJUSTE_PRECIO_PK
 PRIMARY KEY
 (ID_AJUSTE)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_AMORTIZACIONES ADD (
  CONSTRAINT SG_AMORTIZACIONES_PK
 PRIMARY KEY
 (ID_AMORTIZACION)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_CARGA_MUERTA ADD (
  CONSTRAINT SG_CARGA_MUERTA_PK
 PRIMARY KEY
 (ID_CARGA)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_CONSUMOS ADD (
  CONSTRAINT SG_CONSUMOS_PK
 PRIMARY KEY
 (ID_CONSUMO)
    USING INDEX 
    TABLESPACE USERS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));

ALTER TABLE CITYTRUCK.SG_COMPRAS ADD (
  CONSTRAINT SG_COMPRAS_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE),
  CONSTRAINT SG_COMPRAS_R02 
 FOREIGN KEY (ID_CAJA) 
 REFERENCES CITYTRUCK.SG_CAJAS (ID_CAJA));

ALTER TABLE CITYTRUCK.SG_DETALLES_COMPRAS ADD (
  CONSTRAINT SG_DETALLES_COMPRAS_R01 
 FOREIGN KEY (ID_COMPRA) 
 REFERENCES CITYTRUCK.SG_COMPRAS (ID_COMPRA));

ALTER TABLE CITYTRUCK.SG_EGRESOS ADD (
  CONSTRAINT SG_EGRESOS_R01 
 FOREIGN KEY (ID_CAJA) 
 REFERENCES CITYTRUCK.SG_CAJAS (ID_CAJA));

ALTER TABLE CITYTRUCK.SG_FACTURAS_MN ADD (
  CONSTRAINT SG_FACTURAS_MN_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE));

ALTER TABLE CITYTRUCK.SG_INGRESOS ADD (
  CONSTRAINT SG_INGRESOS_R01 
 FOREIGN KEY (ID_CAJA) 
 REFERENCES CITYTRUCK.SG_CAJAS (ID_CAJA));

ALTER TABLE CITYTRUCK.SG_KARDEX_CLIENTE ADD (
  CONSTRAINT SG_KARDEX_CLIENTE_R01 
 FOREIGN KEY (ID_CLIENTE) 
 REFERENCES CITYTRUCK.SG_CLIENTES (ID_CLIENTE));

ALTER TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE ADD (
  CONSTRAINT SG_KARDEX_COMBUSTIBLE_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE));

ALTER TABLE CITYTRUCK.SG_KARDEX_COMBUSTIBLE_MN ADD (
  CONSTRAINT SG_KARDEX_COMBUSTIBLE_MN_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE));

ALTER TABLE CITYTRUCK.SG_KARDEX_EFECTIVO ADD (
  CONSTRAINT SG_KARDEX_EFECTIVO_R01 
 FOREIGN KEY (ID_CAJA) 
 REFERENCES CITYTRUCK.SG_CAJAS (ID_CAJA));

ALTER TABLE CITYTRUCK.SG_LISTAS_ITEMS ADD (
  CONSTRAINT SG_LISTAS_ITEMS_R01 
 FOREIGN KEY (ID_LISTA) 
 REFERENCES CITYTRUCK.SG_LISTAS (ID_LISTA),
  CONSTRAINT SG_LISTAS_ITEMS_R02 
 FOREIGN KEY (ID_PADRE) 
 REFERENCES CITYTRUCK.SG_LISTAS_ITEMS (ID_TABLA));

ALTER TABLE CITYTRUCK.SG_PERFILES_OPCIONES ADD (
  CONSTRAINT SG_PERFILES_OPCIONES_R01 
 FOREIGN KEY (ID_PERFIL) 
 REFERENCES CITYTRUCK.SG_PERFILES (ID_PERFIL),
  CONSTRAINT SG_PERFILES_OPCIONES_R02 
 FOREIGN KEY (ID_OPC) 
 REFERENCES CITYTRUCK.SG_MENU_OPCIONES (ID_OPC));

ALTER TABLE CITYTRUCK.SG_POS ADD (
  CONSTRAINT SG_POS_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE));

ALTER TABLE CITYTRUCK.SG_POS_DIA_MN ADD (
  CONSTRAINT SG_POS_DIA_MN_R01 
 FOREIGN KEY (ID_POS) 
 REFERENCES CITYTRUCK.SG_POS (ID_POS));

ALTER TABLE CITYTRUCK.SG_POS_TURNOS ADD (
  CONSTRAINT SG_POS_TURNOS_R01 
 FOREIGN KEY (ID_POS) 
 REFERENCES CITYTRUCK.SG_POS (ID_POS));

ALTER TABLE CITYTRUCK.SG_TANQUES ADD (
  CONSTRAINT SG_TANQUES_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE));

ALTER TABLE CITYTRUCK.SG_TRANSFERENCIAS ADD (
  CONSTRAINT SG_TRANSFERENCIAS_R01 
 FOREIGN KEY (ID_CAJA_ORIGEN) 
 REFERENCES CITYTRUCK.SG_CAJAS (ID_CAJA),
  CONSTRAINT SG_TRANSFERENCIAS_R02 
 FOREIGN KEY (ID_CAJA_DESTINO) 
 REFERENCES CITYTRUCK.SG_CAJAS (ID_CAJA));

ALTER TABLE CITYTRUCK.SG_USUARIOS ADD (
  CONSTRAINT SG_USUARIOS_R01 
 FOREIGN KEY (ID_PERFIL) 
 REFERENCES CITYTRUCK.SG_PERFILES (ID_PERFIL));

ALTER TABLE CITYTRUCK.SG_VENTAS_CREDITO ADD (
  CONSTRAINT SG_VENTAS_CREDITO_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE),
  CONSTRAINT SG_VENTAS_CREDITO_R02 
 FOREIGN KEY (ID_CLIENTE) 
 REFERENCES CITYTRUCK.SG_CLIENTES (ID_CLIENTE));

ALTER TABLE CITYTRUCK.SG_AJUSTES_TANQUE ADD (
  CONSTRAINT SG_AJUSTES_TANQUE_R01 
 FOREIGN KEY (ID_TANQUE) 
 REFERENCES CITYTRUCK.SG_TANQUES (ID_TANQUE));

ALTER TABLE CITYTRUCK.SG_AJUSTE_POS ADD (
  CONSTRAINT SG_AJUSTE_POS_R01 
 FOREIGN KEY (ID_POS) 
 REFERENCES CITYTRUCK.SG_POS (ID_POS));

ALTER TABLE CITYTRUCK.SG_AJUSTE_PRECIO ADD (
  CONSTRAINT SG_AJUSTE_PRECIO_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE));

ALTER TABLE CITYTRUCK.SG_AMORTIZACIONES ADD (
  CONSTRAINT SG_AMORTIZACIONES_R01 
 FOREIGN KEY (ID_CLIENTE) 
 REFERENCES CITYTRUCK.SG_CLIENTES (ID_CLIENTE),
  CONSTRAINT SG_AMORTIZACIONES_R02 
 FOREIGN KEY (ID_CAJA) 
 REFERENCES CITYTRUCK.SG_CAJAS (ID_CAJA));

ALTER TABLE CITYTRUCK.SG_CARGA_MUERTA ADD (
  CONSTRAINT SG_CARGA_MUERTA_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE));

ALTER TABLE CITYTRUCK.SG_CONSUMOS ADD (
  CONSTRAINT SG_CONSUMOS_R01 
 FOREIGN KEY (ID_COMBUSTIBLE) 
 REFERENCES CITYTRUCK.SG_COMBUSTIBLES (ID_COMBUSTIBLE),
  CONSTRAINT SG_CONSUMOS_R02 
 FOREIGN KEY (ID_CLIENTE) 
 REFERENCES CITYTRUCK.SG_CLIENTES_CONSUMO (ID_CLIENTE),
  CONSTRAINT SG_CONSUMOS_R03 
 FOREIGN KEY (ID_POS) 
 REFERENCES CITYTRUCK.SG_POS (ID_POS));
