using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CityTruck.Services.Interfaces;
using CityTruck.Common;
using CityTruck.Model;
using CityTruck.Services.Model;
using CityTruck.Business.Interfaces;
using System.Linq.Dynamic;
using LinqKit;
using CityTruck.Business;
using System.Data.Objects;
using System.Linq.Expressions;

namespace CityTruck.Services
{
    public class VentasDiariasServices : BaseService, IVentasDiariasServices
    {
        //private ISG_LISTASManager _manListas;

        public VentasDiariasServices(/*ISG_LISTASManager manListas*/)
        {
            //_manListas = manListas;
        }
        public IEnumerable<SG_VENTAS_DIARIAS> ObtenerVentasDiariasPaginado(PagingInfo paginacion, string ANIO, string MES, string ANIO_MES = null)
        {
            IQueryable<SG_VENTAS_DIARIAS> result = null;
            ExecuteManager(uow =>
            {
                var managerVentas = new SG_VENTAS_DIARIASManager(uow);
                //result = managerVentas.BuscarTodos();
                //result = result.Where(x => x.FECHA.ToString("MM-yyyy") == ANIO_MES);

                result = managerVentas.ObtenerVentasPorMesyAnio(ANIO,MES);

                paginacion.total = result.Count();
                //result = managerVentas.QueryPaged(result,paginacion.limit,paginacion.start,paginacion.sort,paginacion.dir);
                
                //var manager = new SG_LISTASManager(uow);
                //result = manager.QueryPaged(manager.Query(), paginacion.limit, paginacion.start, paginacion.sort, paginacion.dir);
                //resultado.Rows = result.ToList();
                //resultado.Total = manager.Query().Count();
                //resultado.success = true;

            });
            return result;
        }


        public IEnumerable<SG_VENTAS_DIARIAS> ObtenerVentasDiariasPorCriterio(System.Linq.Expressions.Expression<Func<SG_VENTAS_DIARIAS, bool>> criterio)
        {
            IQueryable<SG_VENTAS_DIARIAS> result = null;
            ExecuteManager(uow =>
            {
                var managerVentas = new SG_VENTAS_DIARIASManager(uow);
                result = managerVentas.BuscarTodos(criterio);

            });
            return result;
        }




        public RespuestaSP SP_GrabarVentasDiarias(SG_POS_TURNOS p, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                //var manager = new SG_INGRESOSManager(uow);
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_GUARDAR_POS_TURNO(p.ID_POS_TURNO, p.ID_POS, p.TURNO, p.FECHA, p.ENT_LITTER, p.SAL_LITTER, p.TOTAL, ID_USR, p_res);
                //context.P_SG_GUARDAR_INGRESOS(ing.ID_INGRESO, ing.FECHA, ing.CONCEPTO, ing.ID_CAJA, ing.IMPORTE, ID_USR, p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Proceso Ejecutado Correctamente";
                }
                else
                {
                    result.success = false;
                    result.msg = p_res.Value.ToString();
                }

            });
            return result;
        }


        public RespuestaSP SP_GrabarVentasDiarias(string Ventas, int ID_USR)
        {
            throw new NotImplementedException();
        }


        public RespuestaSP SP_GenerarVentasDiarias(SG_VENTAS_DIARIAS ventas, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_GENERAR_VENTAS_DIARIAS(ventas.FECHA, ventas.TURNO, ventas.RESPONSABLE, ID_USR, p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Proceso Ejecutado Correctamente";
                }
                else
                {
                    result.success = false;
                    result.msg = p_res.Value.ToString();
                }

            });
            return result;
        }


        public IEnumerable<SG_AJUSTE_PRECIO> ObtenerAjustesPrecios(Expression<Func<SG_AJUSTE_PRECIO, bool>> criterio)
        {
            IQueryable<SG_AJUSTE_PRECIO> result = null;
            ExecuteManager(uow =>
            {
                var managerVentas = new SG_AJUSTE_PRECIOManager(uow);
                result = managerVentas.BuscarTodos(criterio);

            });
            return result;
        }


        public RespuestaSP SP_VerificarEdicion(SG_POS_TURNOS p, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_VERIFICAR_EDICION(p.FECHA, p.TURNO, p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Ventas modificadas";
                }
                else
                {
                    result.success = false;
                    result.msg = "Ventas sin Modificacion";
                }

            });
            return result;
        }


        public IEnumerable<SG_VENTAS_CREDITO> ObtenerVentasCreditoPaginado(PagingInfo paginacion, FiltrosModel<VentasCreditoModel> filtros)
        {
            IQueryable<SG_VENTAS_CREDITO> result = null;
            ExecuteManager(uow =>
            {
                var manager = new SG_VENTAS_CREDITOManager(uow);
                result = manager.BuscarTodos();
                filtros.FiltrarDatos();
                result = filtros.Diccionario.Count() > 0 ? result.Where(filtros.Predicado, filtros.Diccionario.Values.ToArray()) : result;
                paginacion.total = result.Count();
                result = manager.QueryPaged(result, paginacion.limit, paginacion.start, paginacion.sort, paginacion.dir);
            });
            return result;
        }


        public RespuestaSP SP_GrabarVentasCredito(SG_VENTAS_CREDITO p, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_GUARDAR_VENTA_CREDITO(p.ID_VENTA, p.ID_CLIENTE, p.ID_COMBUSTIBLE, p.FECHA, p.TURNO, p.RESPONSABLE, p.PRECIO, p.IMPORTE_BS, p.IMPORTE_LTS, ID_USR, p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Proceso Ejecutado Correctamente";
                }
                else
                {
                    result.success = false;
                    result.msg = p_res.Value.ToString();
                }

            });
            return result;
        }


        public RespuestaSP SP_EliminarVentaCredito(int ID_VENTA, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_ELIMINAR_VENTA_CREDITO(ID_VENTA, ID_USR,p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Proceso Ejecutado Correctamente";
                }
                else
                {
                    result.success = false;
                    result.msg = p_res.Value.ToString();
                }

            });
            return result;
        }


       

        public RespuestaSP SP_GrabarConsumo(SG_CONSUMOS p, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_GUARDAR_CONSUMO(p.ID_CONSUMO, p.ID_CLIENTE, p.ID_COMBUSTIBLE, p.FECHA, p.TURNO, p.RESPONSABLE, p.PRECIO, p.IMPORTE_BS, p.IMPORTE_LTS, ID_USR, p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Proceso Ejecutado Correctamente";
                }
                else
                {
                    result.success = false;
                    result.msg = p_res.Value.ToString();
                }

            });
            return result;
        }

        public RespuestaSP SP_EliminarConsumo(int ID_CONSUMO, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_ELIMINAR_CONSUMO(ID_CONSUMO, ID_USR, p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Proceso Ejecutado Correctamente";
                }
                else
                {
                    result.success = false;
                    result.msg = p_res.Value.ToString();
                }

            });
            return result;
        }


        public IEnumerable<SG_CONSUMOS> ObtenerConsumosPaginado(PagingInfo paginacion, FiltrosModel<ConsumosModel> filtros)
        {
            IQueryable<SG_CONSUMOS> result = null;
            ExecuteManager(uow =>
            {
                var manager = new SG_CONSUMOSManager(uow);
                result = manager.BuscarTodos();
                filtros.FiltrarDatos();
                result = filtros.Diccionario.Count() > 0 ? result.Where(filtros.Predicado, filtros.Diccionario.Values.ToArray()) : result;
                paginacion.total = result.Count();
                result = manager.QueryPaged(result, paginacion.limit, paginacion.start, paginacion.sort, paginacion.dir);
            });
            return result;
        }


        public SG_VENTAS_DIARIAS ObtenerVentaDiaria(Expression<Func<SG_VENTAS_DIARIAS, bool>> criterio)
        {
            SG_VENTAS_DIARIAS result = null;
            ExecuteManager(uow =>
            {
                var managerVentas = new SG_VENTAS_DIARIASManager(uow);
                result = managerVentas.BuscarTodos(criterio).FirstOrDefault(); ;
                
            });
            return result;
        }


        public VentasRegistroModel SP_UltimoReg()
        {
            VentasRegistroModel result = new VentasRegistroModel();
            ExecuteManager(uow =>
            {
                //var manager = new SG_INGRESOSManager(uow);
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                ObjectParameter p_fecha = new ObjectParameter("p_fecha", typeof(String));
                ObjectParameter p_turno = new ObjectParameter("p_turno", typeof(String));
                context.P_SG_OBTENER_ULTIMO_REG(p_turno, p_fecha, p_res);
                string turno = p_turno.Value.ToString();
                var fecha = p_fecha.Value;
                result.FECHA = p_fecha.Value.ToString();
                result.TURNO = p_turno.Value.ToString();
                result.resp = p_res.Value.ToString();
              

            });
            return result;
        }
        public VentasRegistroModel SP_UltimoRegMN()
        {
            VentasRegistroModel result = new VentasRegistroModel();
            ExecuteManager(uow =>
            {
                //var manager = new SG_INGRESOSManager(uow);
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                ObjectParameter p_fecha = new ObjectParameter("p_fecha", typeof(String));
                context.P_SG_OBTENER_ULTIMO_REG_MN( p_fecha, p_res);
                var fecha = p_fecha.Value;
                result.FECHA = p_fecha.Value.ToString();
                result.resp = p_res.Value.ToString();
            });
            return result;
        }



        public RespuestaSP SP_GrabarVentasDiariasMN(SG_POS_DIA_MN p, int ID_USR)
        {
            RespuestaSP result = new RespuestaSP();
            ExecuteManager(uow =>
            {
                //var manager = new SG_INGRESOSManager(uow);
                var context = (CityTruckContext)uow.Context;
                ObjectParameter p_res = new ObjectParameter("p_res", typeof(String));
                context.P_SG_GUARDAR_POS_DIA_MN(p.ID_POS_DIA_MN, p.ID_POS, p.FECHA, p.ENT_LITTER, p.SAL_LITTER, p.TOTAL, ID_USR, p_res);
                //context.P_SG_GUARDAR_INGRESOS(ing.ID_INGRESO, ing.FECHA, ing.CONCEPTO, ing.ID_CAJA, ing.IMPORTE, ID_USR, p_res);
                if (p_res.Value.ToString() == "1")
                {
                    result.success = true;
                    result.msg = "Proceso Ejecutado Correctamente";
                }
                else
                {
                    result.success = false;
                    result.msg = p_res.Value.ToString();
                }

            });
            return result;
        }
    }
}
